const NIDS = 5
const NPROCS = 4

ids, procs, leader = { 1 .. NIDS }, [], 0
for i in { 0 .. NPROCS - 1 }:
    let next = choose(ids):
        ids -= { next }
        procs += [ next, ]
        if next > leader:
            leader = next

network = {}

def send(m):
    atomic: network |= { m }

def receive(self):
    result = { (id, found) for (dst, id, found) in network where dst == self }

def processor(self, succ):
    send(succ, self, False)
    let working = True:
        while working:
            select (id, found) in receive(self):
                if id == self:
                    assert self == leader
                    send(succ, id, True)
                elif id > self:
                    assert self != leader
                    send(succ, id, found)
                if found:
                    working = False

for i in { 0 .. NPROCS - 1 }:
    spawn processor(procs[i], procs[(i + 1) % NPROCS])
