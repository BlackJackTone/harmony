import bag;
import synch;

def acquire_rlock():
    call lock &(rwlock);
    while nwriters > 0:
        call wait &(rcond);
    ;
    nreaders = nreaders + 1;
    call unlock &(rwlock);
;
def release_rlock():
    call lock &(rwlock);
    nreaders = nreaders - 1;
    if nreaders == 0:
        call notify &(wcond);
    ;
    call unlock &(rwlock);
;
def acquire_wlock():
    call lock &(rwlock);
    while (nreaders + nwriters) > 0:
        call wait &(wcond);
    ;
    nwriters = nwriters + 1;
    call unlock &(rwlock);
;
def release_wlock():
    call lock &(rwlock);
    nwriters = nwriters - 1;
    call notifyAll &(rcond);
    call notify &(wcond);
    call unlock &(rwlock);
;
rwlock = Lock();
rcond = Condition &(rwlock);
wcond = Condition &(rwlock);
nreaders = 0;
nwriters = 0;

def process():
    while choose({ False, True }):
        if choose({ .read, .write }) == .read:
            call acquire_rlock();
            @rcs: assert atLabel.wcs == dict{};
            call release_rlock();
        else:                       # .write
            call acquire_wlock();
            @wcs: assert (atLabel.wcs == dict{ nametag(): 1 }) and
                         (atLabel.rcs == dict{})
                  ;
            call release_wlock();
        ;
    ;
;
for i in 1..4:
    spawn process();
;
