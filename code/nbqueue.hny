from alloc import malloc, free
from synch import cas

def Queue():
    let node = malloc({.next: {.ptr: None, .count: 0}}):
        result = { .head: { .ptr: node, .count: 0 }, .tail: { .ptr: node, .count: 0 } }

def put(q, v):
    let node = malloc({ .value: v, .next: { .ptr: None, .count: 0 } })
    let tail, done = None, False:
        while not done:
            tail = q->tail
            let next = tail.ptr->next:
                if tail == q->tail:
                    if next.ptr == None:
                        if cas(?tail.ptr->next, next, { .ptr: node, .count: next.count + 1 }):
                            done = True
                    else:
                        cas(?q->tail, tail, { .ptr: next.ptr, .count: tail.count + 1 })
        cas(?q->tail, tail, { .ptr: node, .count: tail.count + 1 })

def get(q):
    let done = False:
        while not done:
            let head, tail = q->head, q->tail
            let next = head.ptr->next:
                if head == q->head:
                    if head.ptr == tail.ptr:
                        if next.ptr == None:
                            result = None
                            done = True
                        else:
                            cas(?q->tail, tail, { .ptr: next.ptr, .count: tail.count + 1 })
                    else:
                        result = next.ptr->value
                        if cas(?q->head, head, { .ptr: next.ptr, .count: head.count + 1 }):
                            # free(head.ptr)
                            done = True
