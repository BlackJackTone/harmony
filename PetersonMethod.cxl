def P_enter(pm, pid):
    (^pm).flags[pid] = True;
    (^pm).turn = 1 - pid;
    while (^pm).flags[1 - pid] and ((^pm).turn == (1 - pid)):
        pass;
    ;
;
def P_exit(pm, pid):
    (^pm).flags[pid] = False;
;
def P_mutex():
    result = dict{ .turn: 0, .flags: [ False, False ] };
;

#### The code above can go into its own CXL module ####

def process(self, pm):
    while choose({ False, True }):
        call P_enter(pm, self);
        @cs: assert atLabel.cs == dict{ nametag(): 1 };
        call P_exit(pm, self);
    ;
;
mutex = P_mutex();
spawn process(0, &(mutex)), 0;
spawn process(1, &(mutex)), 1;
