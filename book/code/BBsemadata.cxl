import synch;

const NSLOTS = 2;       # size of bounded buffer
const NPRODS = 2;       # number of producers
const NCONSS = NPRODS;  # number of consumers

# bounded buffer implementation omitted to save space

def producer(i):
    call produce((i, 0));
    call produce((i, 1));
;
def consumer():
    let first = consume():
        let second = consume():
            assert (first[0] != second[0]) or (first[1] < second[1]);
            atomic:
                received = received + { first, second };
            ;
        ;
    ;
;
def main():
    while cardinality(received) < (2 * NCONSS):
        pass;
    ;
    assert received == ({ (i, 0) for i in 1..NPRODS } +
                            { (i, 1) for i in 1..NPRODS })
    ;
;
received = {};
for i in 1..NPRODS:
    spawn producer(i);
;
for i in 1..NCONSS:
    spawn consumer();
;
spawn main();
