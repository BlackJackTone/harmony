import synch;

const NSLOTS = 1;     # size of bounded buffer
const NITEMS = 3;     # number of items to produce/consume
const NPROCS = 2;     # number of processes

def produce(item):
    call P&(nempty);
    call P&(mutex);
    buf[myin] = item;
    myin = (myin % NSLOTS) + 1;
    call V&(mutex);
    call V&(nfull);
;
def consume():
    call P&(nfull);
    call P&(mutex);
    result = buf[myout];
    myout = (myout % NSLOTS) + 1;
    call V&(mutex);
    call V&(nempty);
;
def producer(self):
    for i in 1..NITEMS:
        call produce(i);
    ;
;
def consumer():
    for i in 1..NITEMS:
        result = consume();
    ;
;
buf = dict{ () for x in 1..NSLOTS };
myin = 1; myout = 1;
nfull = Semaphore(0);
nempty = Semaphore(NSLOTS);
mutex = Semaphore(1);
for i in 1..NPROCS:
    spawn consumer();
    spawn producer();
;
