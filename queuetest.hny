import queue

def sender(q, v):
    queue.put(q, v)

def receiver(q):
    let done = False:
        while not done:
            let v = queue.get(q):
                assert v in { None, 1, 2 }
                done = v == None

def test1():
    testq = queue.Queue()
    spawn sender(?testq, 1)
    spawn sender(?testq, 2)
    spawn receiver(?testq)
    spawn receiver(?testq)

def test2():
    testq = queue.Queue()
    queue.insert(?testq, 1)
    queue.insert(?testq, 2)
    queue.insert(?testq, 17)
    let q_bool = queue.contains(?testq, 17):
        assert q_bool
    let q_size = queue.qsize(?testq):
        assert q_size == 3

def test3():
    testq = queue.Queue()
    queue.put(?testq, 1)
    queue.put(?testq, 1)
    queue.put(?testq, 3)
    queue.put(?testq, 1)
    queue.put(?testq, 10)
    queue.remove(?testq, 10)
    let q_bool = queue.contains(?testq, 10):
        assert not q_bool

# def test4():
#     testq = queue.Queue()
#     queue.insert(?testq, 1)
#     queue.insert(?testq, 1)
#     queue.insert(?testq, 3)
#     queue.insert(?testq, 1)
#     queue.insert(?testq, 10)
#     queue.remove(?testq, 1)
#     let q_size = queue.qsize(?testq):
#         assert q_size == 2

let test = choose({test1, test2, test3}):
    test()
    
# def test_qsize(q):
#     let size = queue.qsize(q):
#         assert size in {0, 1, 2}
#     # let done = False:
#     #     let q_size_before = q->size:
#     #         queue.put(q, v)
#     #         done = q->size == (q_size_before + 1)
#     #         assert done

# def test_contains(q, v, boolean):
#     let is_true = queue.contains(q, v):
#         assert is_true == boolean

# # def test_insert(q, v):
# #     queue.insert(q, v)
# #     let head_node = q->head:
# #         assert head_node == v

# testq = queue.Queue()
# spawn sender(?testq, 1)
# spawn sender(?testq, 2)
# # spawn receiver(?testq)
# # spawn receiver(?testq)

# #spawn test_qsize(?testq)
# spawn test_contains(?testq, 2, True)
# #spawn test_insert(?testq, 10)