# return s[b:e]
def subseq(s, b, e):
    result = [];
    for x in {b..e-1}:
        result[x - b] = s[x];
    ;
;

def append(s, e):
    result = s + [e,];
;
def head(s):
    result = s[0];
;
def tail(s):
    result = subseq(s, 1, len(s));
;

# sum of a list or set
def sum(a):
    result = 0;
    for v in a:
        result += v;
    ;
;

# convert list (or values of a dict) to a set
def set(a):
    result = { v for v in a };
;

# convert set into a (sorted) list
def list(a):
    result = [];
    for v in a:
        result += [v,];
    ;
;

# convert values of a dictionary into a list
def values(d):
    result = [];
    for k in keys d:
        result += [ d[k], ];
    ;
;

# like Python enumerate()
def enumerate(d):
    result = [];
    index = 0;
    for k in keys d:
        result += [ (index, d[k]), ];
        index += 1;
    ;
;

# quicksort of a list
def listQsort(a):
    if a == []:
        result = [];
    else:
        let i = 1 let pivot = a[0] let lower, higher = [], []:
            while i < len(a):
                if a[i] < pivot:
                    lower += [a[i],];
                else:
                    higher += [a[i],];
                ;
                i = i + 1;
            ;
            result = listQsort(lower) + [pivot,] + listQsort(higher);
        ;
    ;
;

# like Python sorted()
def sorted(d):
    result = listQsort(list(d));
;

# like Python reversed()
def reversed(d):
    n = len(d);
    result = [];
    for i in { 1..n }:
        result += [ d[n - i], ];
    ;
;

# turn a list into a bag (multiset)
def list2bag(a):
    result = dict{};
    for i in keys(a):
        if a[i] in keys(result):
            result[a[i]] += 1;
        else:
            result[a[i]] = 1;
        ;
    ;
;
