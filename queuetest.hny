sequential done

import queue

const N = 3

def assert_contains(q, v, c):
    let test = queue.contains(q, v):
        assert test == c

def assert_qsize(q, size):
    let test = queue.qsize(q):
        assert test == size

def assert_get(q, val):
    let test = queue.get(q):
        assert test == val

q = queue.Queue()

done = [ False, ] * N

def thread(self, val):
    while choose({ False, True }):
        queue.remove(?q, val)
        assert_contains(?q, val, False)
    
        if choose({ False, True }):
            queue.put(?q, val)
        else:
            queue.insert(?q, val)
        assert_contains(?q, val, True)

    queue.remove(?q, val)
    assert_contains(?q, val, False)

    done[self] = True

def main():
    for i in { 0..N-1 }:
        await done[i]

    assert_qsize(?q, 0)
    for i in { 0..N-1 }:
        assert_contains(?q, i, False)

for i in { 0..N-1 }:
    spawn thread(i, i)
spawn main()
