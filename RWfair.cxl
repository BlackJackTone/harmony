def V_one_r():
    if (nwritersEntered == 0) and (nwritersWaiting == 0) and (nreadersWaiting > 0):
        call V &(rsema);
    elif ((nreadersEntered + nwritersEntered) == 0) and (nwritersWaiting > 0):
        call V &(wsema);
    else:
        call V &(mutex);
    ;
;
def V_one_w():
    if ((nreadersEntered + nwritersEntered) == 0) and (nwritersWaiting > 0):
        call V &(wsema);
    elif (nwritersEntered == 0) and (nwritersWaiting == 0) and (nreadersWaiting > 0):
        call V &(rsema);
    else:
        call V &(mutex);
    ;
;
def acquire_rlock():
    call P &(mutex);
    if (nwritersEntered > 0) or (nwritersWaiting > 0):
        nreadersWaiting = nreadersWaiting + 1;
        call V &(mutex); call P &(rsema);
        nreadersWaiting = nreadersWaiting - 1;
    ;
    nreadersEntered = nreadersEntered + 1;
    call V_one_r();     # only other readers can enter
;
def release_rlock():
    call P &(mutex);
    nreadersEntered = nreadersEntered - 1;
    call V_one_w();     # other writers have right of way
;
def acquire_wlock():
    call P &(mutex);
    if (nreadersEntered + nwritersEntered) > 0:
        nwritersWaiting = nwritersWaiting + 1;
        call V &(mutex); call P &(wsema);
        nwritersWaiting = nwritersWaiting - 1;
    ;
    nwritersEntered = nwritersEntered + 1;
    call V &(mutex);    # no other process can enter
;
def release_wlock():
    call P &(mutex);
    nwritersEntered = nwritersEntered - 1;
    call V_one_r();     # other readers have right of way
;
