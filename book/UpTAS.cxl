const N = 1;

def checkInvariant():
    let sum = 0:
        if not shared:
            sum = 1;
        ;
        for i in 0..(N-1):
            if not private[i]:
                sum = sum + 1;
            ;
        ;
        result = sum <= 1;
    ;
;
def invariantChecker():
    let running = True:
        while running:
            atomic:
                let sum = 0:
                    if not shared:
                        sum = 1;
                    ;
                    for i in 0..(N-1):
                        if not private[i]:
                            sum = sum + 1;
                        ;
                    ;
                    assert sum <= 1;
                ;
                if processes() == dict{ nametag(): 1 }:
                    running = False;
                ;
            ;
        ;
    ;
;
def tas(s, p):
    atomic:
        ^p = ^s;
        ^s = True;
    ;
;
def process(self):
    while choose({ False, True }):
        # Enter critical section
        while private[self]:
            call tas(&(shared), &(private[self]));
        ;

        # Critical section
        @cs: assert (not private[self]) and
                (atLabel.cs == dict{ nametag(): 1 })
             ;

        # Leave critical section
        private[self] = True;
        shared = False;
    ;
;
shared = False;
private = [ True for i in 0..(N-1) ];
spawn invariantChecker(), ();
for i in 0..(N-1):
    spawn process(i), i;
;
