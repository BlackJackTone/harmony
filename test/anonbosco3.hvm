{
  "labels": {
    "__end__": "1137"
  },
  "code": [
    { "op": "Frame", "name": "__init__", "args": "()" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Store", "value": [{ "type": "atom", "value": "synch" }] },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Store", "value": [{ "type": "atom", "value": "list" }] },
    { "op": "Jump", "pc": "327" },
    { "op": "Frame", "name": "subseq", "args": "(s, b, e)" },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "StoreVar", "value": "$n7" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "LoadVar", "value": "b" },
    { "op": "LoadVar", "value": "e" },
    { "op": "Push", "value": { "type": "int", "value": "1" } },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Nary", "arity": 2, "value": ".." },
    { "op": "StoreVar", "value": "$s10" },
    { "op": "LoadVar", "value": "$s10" },
    { "op": "Nary", "arity": 1, "value": "IsEmpty" },
    { "op": "JumpCond", "pc": "27", "cond": { "type": "bool", "value": "True" } },
    { "op": "Cut", "set": "$s10", "var": "x" },
    { "op": "LoadVar", "value": "$n7" },
    { "op": "LoadVar", "value": "x" },
    { "op": "LoadVar", "value": "s" },
    { "op": "Apply" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "IncVar", "value": "$n7" },
    { "op": "Jump", "pc": "16" },
    { "op": "DelVar", "value": "x" },
    { "op": "DelVar", "value": "$s10" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return" },
    { "op": "Jump", "pc": "327" },
    { "op": "Frame", "name": "append", "args": "(s, e)" },
    { "op": "LoadVar", "value": "s" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "LoadVar", "value": "e" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return" },
    { "op": "Jump", "pc": "327" },
    { "op": "Frame", "name": "head", "args": "s" },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "LoadVar", "value": "s" },
    { "op": "Apply" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return" },
    { "op": "Jump", "pc": "327" },
    { "op": "Frame", "name": "tail", "args": "s" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "LoadVar", "value": "s" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": "1" } },
    { "op": "Push", "value": { "type": "int", "value": "1" } },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": "2" } },
    { "op": "LoadVar", "value": "s" },
    { "op": "Nary", "arity": 1, "value": "len" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "pc", "value": "6" } },
    { "op": "Apply" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return" },
    { "op": "Jump", "pc": "327" },
    { "op": "Frame", "name": "sum", "args": "a" },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "StoreVar", "value": "result" },
    { "op": "LoadVar", "value": "a" },
    { "op": "StoreVar", "value": "$s69" },
    { "op": "LoadVar", "value": "$s69" },
    { "op": "Nary", "arity": 1, "value": "IsEmpty" },
    { "op": "JumpCond", "pc": "80", "cond": { "type": "bool", "value": "True" } },
    { "op": "Cut", "set": "$s69", "var": "v" },
    { "op": "LoadVar", "value": "result" },
    { "op": "LoadVar", "value": "v" },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Jump", "pc": "71" },
    { "op": "DelVar", "value": "v" },
    { "op": "DelVar", "value": "$s69" },
    { "op": "Return" },
    { "op": "Jump", "pc": "327" },
    { "op": "Frame", "name": "set", "args": "a" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "LoadVar", "value": "a" },
    { "op": "StoreVar", "value": "$s86" },
    { "op": "LoadVar", "value": "$s86" },
    { "op": "Nary", "arity": 1, "value": "IsEmpty" },
    { "op": "JumpCond", "pc": "95", "cond": { "type": "bool", "value": "True" } },
    { "op": "Cut", "set": "$s86", "var": "v" },
    { "op": "LoadVar", "value": "v" },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Jump", "pc": "88" },
    { "op": "DelVar", "value": "v" },
    { "op": "DelVar", "value": "$s86" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return" },
    { "op": "Jump", "pc": "327" },
    { "op": "Frame", "name": "list", "args": "a" },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "StoreVar", "value": "$n101" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "LoadVar", "value": "a" },
    { "op": "StoreVar", "value": "$s104" },
    { "op": "LoadVar", "value": "$s104" },
    { "op": "Nary", "arity": 1, "value": "IsEmpty" },
    { "op": "JumpCond", "pc": "115", "cond": { "type": "bool", "value": "True" } },
    { "op": "Cut", "set": "$s104", "var": "v" },
    { "op": "LoadVar", "value": "$n101" },
    { "op": "LoadVar", "value": "v" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "IncVar", "value": "$n101" },
    { "op": "Jump", "pc": "106" },
    { "op": "DelVar", "value": "v" },
    { "op": "DelVar", "value": "$s104" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return" },
    { "op": "Jump", "pc": "327" },
    { "op": "Frame", "name": "values", "args": "d" },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "StoreVar", "value": "$n121" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "LoadVar", "value": "d" },
    { "op": "Nary", "arity": 1, "value": "keys" },
    { "op": "StoreVar", "value": "$s124" },
    { "op": "LoadVar", "value": "$s124" },
    { "op": "Nary", "arity": 1, "value": "IsEmpty" },
    { "op": "JumpCond", "pc": "138", "cond": { "type": "bool", "value": "True" } },
    { "op": "Cut", "set": "$s124", "var": "k" },
    { "op": "LoadVar", "value": "$n121" },
    { "op": "LoadVar", "value": "k" },
    { "op": "LoadVar", "value": "d" },
    { "op": "Apply" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "IncVar", "value": "$n121" },
    { "op": "Jump", "pc": "127" },
    { "op": "DelVar", "value": "k" },
    { "op": "DelVar", "value": "$s124" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return" },
    { "op": "Jump", "pc": "327" },
    { "op": "Frame", "name": "items", "args": "d" },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "StoreVar", "value": "$n144" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "LoadVar", "value": "d" },
    { "op": "Nary", "arity": 1, "value": "keys" },
    { "op": "StoreVar", "value": "$s147" },
    { "op": "LoadVar", "value": "$s147" },
    { "op": "Nary", "arity": 1, "value": "IsEmpty" },
    { "op": "JumpCond", "pc": "167", "cond": { "type": "bool", "value": "True" } },
    { "op": "Cut", "set": "$s147", "var": "k" },
    { "op": "LoadVar", "value": "$n144" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "LoadVar", "value": "k" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": "1" } },
    { "op": "LoadVar", "value": "k" },
    { "op": "LoadVar", "value": "d" },
    { "op": "Apply" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "IncVar", "value": "$n144" },
    { "op": "Jump", "pc": "150" },
    { "op": "DelVar", "value": "k" },
    { "op": "DelVar", "value": "$s147" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return" },
    { "op": "Jump", "pc": "327" },
    { "op": "Frame", "name": "enumerate", "args": "d" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "StoreVar", "value": "result" },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "StoreVar", "value": "index" },
    { "op": "LoadVar", "value": "d" },
    { "op": "Nary", "arity": 1, "value": "keys" },
    { "op": "StoreVar", "value": "$s177" },
    { "op": "LoadVar", "value": "$s177" },
    { "op": "Nary", "arity": 1, "value": "IsEmpty" },
    { "op": "JumpCond", "pc": "204", "cond": { "type": "bool", "value": "True" } },
    { "op": "Cut", "set": "$s177", "var": "k" },
    { "op": "LoadVar", "value": "result" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "LoadVar", "value": "index" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": "1" } },
    { "op": "LoadVar", "value": "k" },
    { "op": "LoadVar", "value": "d" },
    { "op": "Apply" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "StoreVar", "value": "result" },
    { "op": "LoadVar", "value": "index" },
    { "op": "Push", "value": { "type": "int", "value": "1" } },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "StoreVar", "value": "index" },
    { "op": "Jump", "pc": "180" },
    { "op": "DelVar", "value": "k" },
    { "op": "DelVar", "value": "$s177" },
    { "op": "DelVar", "value": "index" },
    { "op": "Return" },
    { "op": "Jump", "pc": "327" },
    { "op": "Frame", "name": "qsort", "args": "a" },
    { "op": "LoadVar", "value": "a" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "JumpCond", "pc": "217", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "StoreVar", "value": "result" },
    { "op": "Jump", "pc": "287" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "LoadVar", "value": "a" },
    { "op": "Push", "value": { "type": "pc", "value": "42" } },
    { "op": "Apply" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": "1" } },
    { "op": "LoadVar", "value": "a" },
    { "op": "Push", "value": { "type": "pc", "value": "49" } },
    { "op": "Apply" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "StoreVar", "value": "(pivot, rest)" },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "StoreVar", "value": "$n229" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "LoadVar", "value": "rest" },
    { "op": "StoreVar", "value": "$s232" },
    { "op": "LoadVar", "value": "$s232" },
    { "op": "Nary", "arity": 1, "value": "IsEmpty" },
    { "op": "JumpCond", "pc": "247", "cond": { "type": "bool", "value": "True" } },
    { "op": "Cut", "set": "$s232", "var": "v" },
    { "op": "LoadVar", "value": "v" },
    { "op": "LoadVar", "value": "pivot" },
    { "op": "Nary", "arity": 2, "value": "<" },
    { "op": "JumpCond", "pc": "234", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$n229" },
    { "op": "LoadVar", "value": "v" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "IncVar", "value": "$n229" },
    { "op": "Jump", "pc": "234" },
    { "op": "DelVar", "value": "v" },
    { "op": "DelVar", "value": "$s232" },
    { "op": "StoreVar", "value": "lower" },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "StoreVar", "value": "$n250" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "LoadVar", "value": "rest" },
    { "op": "StoreVar", "value": "$s253" },
    { "op": "LoadVar", "value": "$s253" },
    { "op": "Nary", "arity": 1, "value": "IsEmpty" },
    { "op": "JumpCond", "pc": "268", "cond": { "type": "bool", "value": "True" } },
    { "op": "Cut", "set": "$s253", "var": "v" },
    { "op": "LoadVar", "value": "v" },
    { "op": "LoadVar", "value": "pivot" },
    { "op": "Nary", "arity": 2, "value": ">=" },
    { "op": "JumpCond", "pc": "255", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$n250" },
    { "op": "LoadVar", "value": "v" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "IncVar", "value": "$n250" },
    { "op": "Jump", "pc": "255" },
    { "op": "DelVar", "value": "v" },
    { "op": "DelVar", "value": "$s253" },
    { "op": "StoreVar", "value": "higher" },
    { "op": "LoadVar", "value": "lower" },
    { "op": "Push", "value": { "type": "pc", "value": "209" } },
    { "op": "Apply" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "LoadVar", "value": "pivot" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "LoadVar", "value": "higher" },
    { "op": "Push", "value": { "type": "pc", "value": "209" } },
    { "op": "Apply" },
    { "op": "Nary", "arity": 3, "value": "+" },
    { "op": "StoreVar", "value": "result" },
    { "op": "DelVar", "value": "pivot" },
    { "op": "DelVar", "value": "rest" },
    { "op": "DelVar", "value": "lower" },
    { "op": "DelVar", "value": "higher" },
    { "op": "Return" },
    { "op": "Jump", "pc": "327" },
    { "op": "Frame", "name": "sorted", "args": "d" },
    { "op": "LoadVar", "value": "d" },
    { "op": "Push", "value": { "type": "pc", "value": "100" } },
    { "op": "Apply" },
    { "op": "Push", "value": { "type": "pc", "value": "209" } },
    { "op": "Apply" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return" },
    { "op": "Jump", "pc": "327" },
    { "op": "Frame", "name": "reversed", "args": "d" },
    { "op": "LoadVar", "value": "d" },
    { "op": "Nary", "arity": 1, "value": "len" },
    { "op": "StoreVar", "value": "n" },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "StoreVar", "value": "$n302" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": "1" } },
    { "op": "LoadVar", "value": "n" },
    { "op": "Nary", "arity": 2, "value": ".." },
    { "op": "StoreVar", "value": "$s305" },
    { "op": "LoadVar", "value": "$s305" },
    { "op": "Nary", "arity": 1, "value": "IsEmpty" },
    { "op": "JumpCond", "pc": "322", "cond": { "type": "bool", "value": "True" } },
    { "op": "Cut", "set": "$s305", "var": "i" },
    { "op": "LoadVar", "value": "$n302" },
    { "op": "LoadVar", "value": "n" },
    { "op": "LoadVar", "value": "i" },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "LoadVar", "value": "d" },
    { "op": "Apply" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "IncVar", "value": "$n302" },
    { "op": "Jump", "pc": "309" },
    { "op": "DelVar", "value": "i" },
    { "op": "DelVar", "value": "$s305" },
    { "op": "StoreVar", "value": "result" },
    { "op": "DelVar", "value": "n" },
    { "op": "Return" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Store", "value": [{ "type": "atom", "value": "bag" }] },
    { "op": "Jump", "pc": "901" },
    { "op": "Frame", "name": "empty", "args": "()" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return" },
    { "op": "Jump", "pc": "901" },
    { "op": "Frame", "name": "fromSet", "args": "s" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "LoadVar", "value": "s" },
    { "op": "StoreVar", "value": "$s337" },
    { "op": "LoadVar", "value": "$s337" },
    { "op": "Nary", "arity": 1, "value": "IsEmpty" },
    { "op": "JumpCond", "pc": "347", "cond": { "type": "bool", "value": "True" } },
    { "op": "Cut", "set": "$s337", "var": "elt" },
    { "op": "LoadVar", "value": "elt" },
    { "op": "Push", "value": { "type": "int", "value": "1" } },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Jump", "pc": "339" },
    { "op": "DelVar", "value": "elt" },
    { "op": "DelVar", "value": "$s337" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return" },
    { "op": "Jump", "pc": "901" },
    { "op": "Frame", "name": "fromList", "args": "a" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "StoreVar", "value": "result" },
    { "op": "LoadVar", "value": "a" },
    { "op": "Nary", "arity": 1, "value": "keys" },
    { "op": "StoreVar", "value": "$s355" },
    { "op": "LoadVar", "value": "$s355" },
    { "op": "Nary", "arity": 1, "value": "IsEmpty" },
    { "op": "JumpCond", "pc": "388", "cond": { "type": "bool", "value": "True" } },
    { "op": "Cut", "set": "$s355", "var": "i" },
    { "op": "LoadVar", "value": "i" },
    { "op": "LoadVar", "value": "a" },
    { "op": "Apply" },
    { "op": "LoadVar", "value": "result" },
    { "op": "Nary", "arity": 1, "value": "keys" },
    { "op": "Nary", "arity": 2, "value": "in" },
    { "op": "JumpCond", "pc": "380", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "address", "value": [{ "type": "atom", "value": "result" }] } },
    { "op": "LoadVar", "value": "i" },
    { "op": "LoadVar", "value": "a" },
    { "op": "Apply" },
    { "op": "Address" },
    { "op": "Dup" },
    { "op": "LoadVar" },
    { "op": "Push", "value": { "type": "int", "value": "1" } },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "StoreVar" },
    { "op": "Jump", "pc": "358" },
    { "op": "Push", "value": { "type": "address", "value": [{ "type": "atom", "value": "result" }] } },
    { "op": "LoadVar", "value": "i" },
    { "op": "LoadVar", "value": "a" },
    { "op": "Apply" },
    { "op": "Address" },
    { "op": "Push", "value": { "type": "int", "value": "1" } },
    { "op": "StoreVar" },
    { "op": "Jump", "pc": "358" },
    { "op": "DelVar", "value": "i" },
    { "op": "DelVar", "value": "$s355" },
    { "op": "Return" },
    { "op": "Jump", "pc": "901" },
    { "op": "Frame", "name": "count", "args": "(bg, elt)" },
    { "op": "ReadonlyInc" },
    { "op": "AtomicInc" },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "LoadVar", "value": "bg" },
    { "op": "Nary", "arity": 2, "value": "in" },
    { "op": "Nary", "arity": 1, "value": "not" },
    { "op": "Assert" },
    { "op": "AtomicDec" },
    { "op": "ReadonlyDec" },
    { "op": "LoadVar", "value": "elt" },
    { "op": "LoadVar", "value": "bg" },
    { "op": "Nary", "arity": 1, "value": "keys" },
    { "op": "Nary", "arity": 2, "value": "in" },
    { "op": "JumpCond", "pc": "412", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "elt" },
    { "op": "LoadVar", "value": "bg" },
    { "op": "Apply" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Jump", "pc": "414" },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return" },
    { "op": "Jump", "pc": "901" },
    { "op": "Frame", "name": "size", "args": "bg" },
    { "op": "ReadonlyInc" },
    { "op": "AtomicInc" },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "LoadVar", "value": "bg" },
    { "op": "Nary", "arity": 2, "value": "in" },
    { "op": "Nary", "arity": 1, "value": "not" },
    { "op": "Assert" },
    { "op": "AtomicDec" },
    { "op": "ReadonlyDec" },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "StoreVar", "value": "result" },
    { "op": "LoadVar", "value": "bg" },
    { "op": "StoreVar", "value": "$s428" },
    { "op": "LoadVar", "value": "$s428" },
    { "op": "Nary", "arity": 1, "value": "IsEmpty" },
    { "op": "JumpCond", "pc": "439", "cond": { "type": "bool", "value": "True" } },
    { "op": "Cut", "set": "$s428", "var": "c" },
    { "op": "LoadVar", "value": "result" },
    { "op": "LoadVar", "value": "c" },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Jump", "pc": "430" },
    { "op": "DelVar", "value": "c" },
    { "op": "DelVar", "value": "$s428" },
    { "op": "Return" },
    { "op": "Jump", "pc": "901" },
    { "op": "Frame", "name": "bchoose", "args": "bg" },
    { "op": "ReadonlyInc" },
    { "op": "AtomicInc" },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "LoadVar", "value": "bg" },
    { "op": "Nary", "arity": 2, "value": "in" },
    { "op": "Nary", "arity": 1, "value": "not" },
    { "op": "Assert" },
    { "op": "AtomicDec" },
    { "op": "ReadonlyDec" },
    { "op": "LoadVar", "value": "bg" },
    { "op": "Nary", "arity": 1, "value": "keys" },
    { "op": "Choose" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return" },
    { "op": "Jump", "pc": "901" },
    { "op": "Frame", "name": "add", "args": "(pb, elt)" },
    { "op": "ReadonlyInc" },
    { "op": "AtomicInc" },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "LoadVar", "value": "pb" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "in" },
    { "op": "Nary", "arity": 1, "value": "not" },
    { "op": "Assert" },
    { "op": "AtomicDec" },
    { "op": "ReadonlyDec" },
    { "op": "LoadVar", "value": "elt" },
    { "op": "LoadVar", "value": "pb" },
    { "op": "Load" },
    { "op": "Nary", "arity": 1, "value": "keys" },
    { "op": "Nary", "arity": 2, "value": "in" },
    { "op": "JumpCond", "pc": "485", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "pb" },
    { "op": "LoadVar", "value": "elt" },
    { "op": "Address" },
    { "op": "Dup" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "int", "value": "1" } },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "Store" },
    { "op": "Jump", "pc": "490" },
    { "op": "LoadVar", "value": "pb" },
    { "op": "LoadVar", "value": "elt" },
    { "op": "Address" },
    { "op": "Push", "value": { "type": "int", "value": "1" } },
    { "op": "Store" },
    { "op": "Return" },
    { "op": "Jump", "pc": "901" },
    { "op": "Frame", "name": "f_add", "args": "(bg, elt)" },
    { "op": "ReadonlyInc" },
    { "op": "AtomicInc" },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "LoadVar", "value": "bg" },
    { "op": "Nary", "arity": 2, "value": "in" },
    { "op": "Nary", "arity": 1, "value": "not" },
    { "op": "Assert" },
    { "op": "AtomicDec" },
    { "op": "ReadonlyDec" },
    { "op": "LoadVar", "value": "bg" },
    { "op": "StoreVar", "value": "result" },
    { "op": "LoadVar", "value": "elt" },
    { "op": "LoadVar", "value": "result" },
    { "op": "Nary", "arity": 1, "value": "keys" },
    { "op": "Nary", "arity": 2, "value": "in" },
    { "op": "JumpCond", "pc": "518", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "address", "value": [{ "type": "atom", "value": "result" }] } },
    { "op": "LoadVar", "value": "elt" },
    { "op": "Address" },
    { "op": "Dup" },
    { "op": "LoadVar" },
    { "op": "Push", "value": { "type": "int", "value": "1" } },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "StoreVar" },
    { "op": "Jump", "pc": "523" },
    { "op": "Push", "value": { "type": "address", "value": [{ "type": "atom", "value": "result" }] } },
    { "op": "LoadVar", "value": "elt" },
    { "op": "Address" },
    { "op": "Push", "value": { "type": "int", "value": "1" } },
    { "op": "StoreVar" },
    { "op": "Return" },
    { "op": "Jump", "pc": "901" },
    { "op": "Frame", "name": "remove", "args": "(pb, elt)" },
    { "op": "ReadonlyInc" },
    { "op": "AtomicInc" },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "LoadVar", "value": "pb" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "in" },
    { "op": "Nary", "arity": 1, "value": "not" },
    { "op": "Assert" },
    { "op": "AtomicDec" },
    { "op": "ReadonlyDec" },
    { "op": "LoadVar", "value": "elt" },
    { "op": "LoadVar", "value": "pb" },
    { "op": "Load" },
    { "op": "Nary", "arity": 1, "value": "keys" },
    { "op": "Nary", "arity": 2, "value": "in" },
    { "op": "JumpCond", "pc": "549", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "pb" },
    { "op": "LoadVar", "value": "elt" },
    { "op": "Address" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "Nary", "arity": 2, "value": ">" },
    { "op": "Jump", "pc": "550" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "JumpCond", "pc": "560", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "pb" },
    { "op": "LoadVar", "value": "elt" },
    { "op": "Address" },
    { "op": "Dup" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "int", "value": "1" } },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Store" },
    { "op": "Jump", "pc": "560" },
    { "op": "LoadVar", "value": "pb" },
    { "op": "LoadVar", "value": "elt" },
    { "op": "Address" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "Nary", "arity": 2, "value": "<=" },
    { "op": "JumpCond", "pc": "572", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "pb" },
    { "op": "LoadVar", "value": "elt" },
    { "op": "Address" },
    { "op": "Del" },
    { "op": "Jump", "pc": "572" },
    { "op": "Return" },
    { "op": "Jump", "pc": "901" },
    { "op": "Frame", "name": "f_remove", "args": "(bg, elt)" },
    { "op": "ReadonlyInc" },
    { "op": "AtomicInc" },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "LoadVar", "value": "bg" },
    { "op": "Nary", "arity": 2, "value": "in" },
    { "op": "Nary", "arity": 1, "value": "not" },
    { "op": "Assert" },
    { "op": "AtomicDec" },
    { "op": "ReadonlyDec" },
    { "op": "LoadVar", "value": "bg" },
    { "op": "StoreVar", "value": "result" },
    { "op": "LoadVar", "value": "elt" },
    { "op": "LoadVar", "value": "result" },
    { "op": "Nary", "arity": 1, "value": "keys" },
    { "op": "Nary", "arity": 2, "value": "in" },
    { "op": "JumpCond", "pc": "597", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "elt" },
    { "op": "LoadVar", "value": "result" },
    { "op": "Apply" },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "Nary", "arity": 2, "value": ">" },
    { "op": "Jump", "pc": "598" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "JumpCond", "pc": "608", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "address", "value": [{ "type": "atom", "value": "result" }] } },
    { "op": "LoadVar", "value": "elt" },
    { "op": "Address" },
    { "op": "Dup" },
    { "op": "LoadVar" },
    { "op": "Push", "value": { "type": "int", "value": "1" } },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "StoreVar" },
    { "op": "Jump", "pc": "608" },
    { "op": "LoadVar", "value": "elt" },
    { "op": "LoadVar", "value": "result" },
    { "op": "Apply" },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "Nary", "arity": 2, "value": "<=" },
    { "op": "JumpCond", "pc": "619", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "address", "value": [{ "type": "atom", "value": "result" }] } },
    { "op": "LoadVar", "value": "elt" },
    { "op": "Address" },
    { "op": "DelVar" },
    { "op": "Jump", "pc": "619" },
    { "op": "Return" },
    { "op": "Jump", "pc": "901" },
    { "op": "Frame", "name": "tas", "args": "lk" },
    { "op": "AtomicInc" },
    { "op": "LoadVar", "value": "lk" },
    { "op": "Load" },
    { "op": "StoreVar", "value": "result" },
    { "op": "LoadVar", "value": "lk" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Store" },
    { "op": "AtomicDec" },
    { "op": "Return" },
    { "op": "Jump", "pc": "901" },
    { "op": "Frame", "name": "cas", "args": "(p, old, new)" },
    { "op": "AtomicInc" },
    { "op": "LoadVar", "value": "p" },
    { "op": "Load" },
    { "op": "LoadVar", "value": "old" },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "StoreVar", "value": "result" },
    { "op": "LoadVar", "value": "result" },
    { "op": "JumpCond", "pc": "645", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "p" },
    { "op": "LoadVar", "value": "new" },
    { "op": "Store" },
    { "op": "Jump", "pc": "645" },
    { "op": "AtomicDec" },
    { "op": "Return" },
    { "op": "Jump", "pc": "901" },
    { "op": "Frame", "name": "BinSema", "args": "acquired" },
    { "op": "LoadVar", "value": "acquired" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return" },
    { "op": "Jump", "pc": "901" },
    { "op": "Frame", "name": "Lock", "args": "()" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "pc", "value": "648" } },
    { "op": "Apply" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return" },
    { "op": "Jump", "pc": "901" },
    { "op": "Frame", "name": "acquired", "args": "binsema" },
    { "op": "LoadVar", "value": "binsema" },
    { "op": "Load" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return" },
    { "op": "Jump", "pc": "901" },
    { "op": "Frame", "name": "acquire", "args": "binsema" },
    { "op": "LoadVar", "value": "binsema" },
    { "op": "Push", "value": { "type": "pc", "value": "621" } },
    { "op": "Apply" },
    { "op": "JumpCond", "pc": "667", "cond": { "type": "bool", "value": "True" } },
    { "op": "Return" },
    { "op": "Jump", "pc": "901" },
    { "op": "Frame", "name": "release", "args": "binsema" },
    { "op": "AtomicInc" },
    { "op": "ReadonlyInc" },
    { "op": "AtomicInc" },
    { "op": "LoadVar", "value": "binsema" },
    { "op": "Load" },
    { "op": "Assert" },
    { "op": "AtomicDec" },
    { "op": "ReadonlyDec" },
    { "op": "LoadVar", "value": "binsema" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Store" },
    { "op": "AtomicDec" },
    { "op": "Return" },
    { "op": "Jump", "pc": "901" },
    { "op": "Frame", "name": "held", "args": "binsema" },
    { "op": "LoadVar", "value": "binsema" },
    { "op": "Load" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return" },
    { "op": "Jump", "pc": "901" },
    { "op": "Frame", "name": "Condition", "args": "()" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "pc", "value": "330" } },
    { "op": "Apply" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return" },
    { "op": "Jump", "pc": "901" },
    { "op": "Frame", "name": "wait", "args": "(c, lk)" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": "1" } },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": "2" } },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Nary", "arity": 1, "value": "get_context" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "StoreVar", "value": "(blocked, cnt, ctx)" },
    { "op": "AtomicInc" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "LoadVar", "value": "c" },
    { "op": "Load" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": "1" } },
    { "op": "LoadVar", "value": "ctx" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "pc", "value": "392" } },
    { "op": "Apply" },
    { "op": "StoreVar", "value": "cnt" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "LoadVar", "value": "c" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": "1" } },
    { "op": "LoadVar", "value": "ctx" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "pc", "value": "459" } },
    { "op": "Apply" },
    { "op": "Pop" },
    { "op": "LoadVar", "value": "lk" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Store" },
    { "op": "AtomicDec" },
    { "op": "LoadVar", "value": "blocked" },
    { "op": "JumpCond", "pc": "770", "cond": { "type": "bool", "value": "False" } },
    { "op": "AtomicInc" },
    { "op": "LoadVar", "value": "lk" },
    { "op": "Load" },
    { "op": "Nary", "arity": 1, "value": "not" },
    { "op": "JumpCond", "pc": "760", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "LoadVar", "value": "c" },
    { "op": "Load" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": "1" } },
    { "op": "LoadVar", "value": "ctx" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "pc", "value": "392" } },
    { "op": "Apply" },
    { "op": "LoadVar", "value": "cnt" },
    { "op": "Nary", "arity": 2, "value": "<=" },
    { "op": "Jump", "pc": "761" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "JumpCond", "pc": "768", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "lk" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Store" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "StoreVar", "value": "blocked" },
    { "op": "Jump", "pc": "768" },
    { "op": "AtomicDec" },
    { "op": "Jump", "pc": "740" },
    { "op": "DelVar", "value": "blocked" },
    { "op": "DelVar", "value": "cnt" },
    { "op": "DelVar", "value": "ctx" },
    { "op": "Return" },
    { "op": "Jump", "pc": "901" },
    { "op": "Frame", "name": "notify", "args": "c" },
    { "op": "AtomicInc" },
    { "op": "LoadVar", "value": "c" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "pc", "value": "330" } },
    { "op": "Apply" },
    { "op": "Nary", "arity": 2, "value": "!=" },
    { "op": "JumpCond", "pc": "798", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "LoadVar", "value": "c" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": "1" } },
    { "op": "LoadVar", "value": "c" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "pc", "value": "443" } },
    { "op": "Apply" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "pc", "value": "525" } },
    { "op": "Apply" },
    { "op": "Pop" },
    { "op": "Jump", "pc": "798" },
    { "op": "AtomicDec" },
    { "op": "Return" },
    { "op": "Jump", "pc": "901" },
    { "op": "Frame", "name": "notifyAll", "args": "c" },
    { "op": "LoadVar", "value": "c" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "pc", "value": "330" } },
    { "op": "Apply" },
    { "op": "Store" },
    { "op": "Return" },
    { "op": "Jump", "pc": "901" },
    { "op": "Frame", "name": "Semaphore", "args": "cnt" },
    { "op": "LoadVar", "value": "cnt" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return" },
    { "op": "Jump", "pc": "901" },
    { "op": "Frame", "name": "P", "args": "sema" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "StoreVar", "value": "blocked" },
    { "op": "LoadVar", "value": "blocked" },
    { "op": "JumpCond", "pc": "836", "cond": { "type": "bool", "value": "False" } },
    { "op": "AtomicInc" },
    { "op": "LoadVar", "value": "sema" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "Nary", "arity": 2, "value": ">" },
    { "op": "JumpCond", "pc": "834", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "sema" },
    { "op": "Dup" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "int", "value": "1" } },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Store" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "StoreVar", "value": "blocked" },
    { "op": "Jump", "pc": "834" },
    { "op": "AtomicDec" },
    { "op": "Jump", "pc": "817" },
    { "op": "DelVar", "value": "blocked" },
    { "op": "Return" },
    { "op": "Jump", "pc": "901" },
    { "op": "Frame", "name": "V", "args": "sema" },
    { "op": "AtomicInc" },
    { "op": "LoadVar", "value": "sema" },
    { "op": "Dup" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "int", "value": "1" } },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "Store" },
    { "op": "AtomicDec" },
    { "op": "Return" },
    { "op": "Jump", "pc": "901" },
    { "op": "Frame", "name": "Queue", "args": "()" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return" },
    { "op": "Jump", "pc": "901" },
    { "op": "Frame", "name": "get", "args": "q" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "StoreVar", "value": "blocked" },
    { "op": "LoadVar", "value": "blocked" },
    { "op": "JumpCond", "pc": "882", "cond": { "type": "bool", "value": "False" } },
    { "op": "AtomicInc" },
    { "op": "LoadVar", "value": "q" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Nary", "arity": 2, "value": "!=" },
    { "op": "JumpCond", "pc": "880", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "q" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "pc", "value": "42" } },
    { "op": "Apply" },
    { "op": "StoreVar", "value": "result" },
    { "op": "LoadVar", "value": "q" },
    { "op": "LoadVar", "value": "q" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "pc", "value": "49" } },
    { "op": "Apply" },
    { "op": "Store" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "StoreVar", "value": "blocked" },
    { "op": "Jump", "pc": "880" },
    { "op": "AtomicDec" },
    { "op": "Jump", "pc": "858" },
    { "op": "DelVar", "value": "blocked" },
    { "op": "Return" },
    { "op": "Jump", "pc": "901" },
    { "op": "Frame", "name": "put", "args": "(q, item)" },
    { "op": "AtomicInc" },
    { "op": "LoadVar", "value": "q" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "LoadVar", "value": "q" },
    { "op": "Load" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": "1" } },
    { "op": "LoadVar", "value": "item" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "pc", "value": "32" } },
    { "op": "Apply" },
    { "op": "Store" },
    { "op": "AtomicDec" },
    { "op": "Return" },
    { "op": "Push", "value": { "type": "address", "value": [{ "type": "atom", "value": "network" }] } },
    { "op": "Sequential" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "pc", "value": "330" } },
    { "op": "Apply" },
    { "op": "Store", "value": [{ "type": "atom", "value": "network" }] },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "Store", "value": [{ "type": "atom", "value": "decisions" }] },
    { "op": "Jump", "pc": "1113" },
    { "op": "Frame", "name": "broadcast", "args": "msg" },
    { "op": "AtomicInc" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "Push", "value": { "type": "address", "value": [{ "type": "atom", "value": "network" }] } },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": "1" } },
    { "op": "LoadVar", "value": "msg" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "pc", "value": "459" } },
    { "op": "Apply" },
    { "op": "Pop" },
    { "op": "AtomicDec" },
    { "op": "Return" },
    { "op": "Jump", "pc": "1113" },
    { "op": "Frame", "name": "receive", "args": "round" },
    { "op": "Load", "value": [{ "type": "atom", "value": "receiving" }] },
    { "op": "Load", "value": [{ "type": "atom", "value": "while" }] },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Apply" },
    { "op": "Apply" },
    { "op": "StoreVar", "value": "receiving" },
    { "op": "AtomicInc" },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "StoreVar", "value": "$n933" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Load", "value": [{ "type": "atom", "value": "network" }] },
    { "op": "Nary", "arity": 1, "value": "keys" },
    { "op": "StoreVar", "value": "$s936" },
    { "op": "LoadVar", "value": "$s936" },
    { "op": "Nary", "arity": 1, "value": "IsEmpty" },
    { "op": "JumpCond", "pc": "961", "cond": { "type": "bool", "value": "True" } },
    { "op": "Cut", "set": "$s936", "var": "(r, e)" },
    { "op": "LoadVar", "value": "r" },
    { "op": "LoadVar", "value": "round" },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "JumpCond", "pc": "939", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$n933" },
    { "op": "Push", "value": { "type": "address", "value": [{ "type": "atom", "value": "network" }] } },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "LoadVar", "value": "r" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": "1" } },
    { "op": "LoadVar", "value": "e" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Address" },
    { "op": "Load" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "IncVar", "value": "$n933" },
    { "op": "Jump", "pc": "939" },
    { "op": "DelVar", "value": "r" },
    { "op": "DelVar", "value": "e" },
    { "op": "DelVar", "value": "$s936" },
    { "op": "Push", "value": { "type": "pc", "value": "66" } },
    { "op": "Apply" },
    { "op": "Push", "value": { "type": "int", "value": "3" } },
    { "op": "Nary", "arity": 2, "value": ">=" },
    { "op": "StoreVar", "value": "receiving" },
    { "op": "Load", "value": [{ "type": "atom", "value": "network" }] },
    { "op": "StoreVar", "value": "result" },
    { "op": "AtomicDec" },
    { "op": "DelVar", "value": "receiving" },
    { "op": "Return" },
    { "op": "Jump", "pc": "1113" },
    { "op": "Frame", "name": "process", "args": "proposal" },
    { "op": "LoadVar", "value": "proposal" },
    { "op": "StoreVar", "value": "est" },
    { "op": "Push", "value": { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" }] } },
    { "op": "StoreVar", "value": "$s978" },
    { "op": "LoadVar", "value": "$s978" },
    { "op": "Nary", "arity": 1, "value": "IsEmpty" },
    { "op": "JumpCond", "pc": "1109", "cond": { "type": "bool", "value": "True" } },
    { "op": "Cut", "set": "$s978", "var": "round" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "LoadVar", "value": "round" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": "1" } },
    { "op": "LoadVar", "value": "est" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "pc", "value": "910" } },
    { "op": "Apply" },
    { "op": "Pop" },
    { "op": "LoadVar", "value": "round" },
    { "op": "Push", "value": { "type": "pc", "value": "925" } },
    { "op": "Apply" },
    { "op": "StoreVar", "value": "msgs" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "LoadVar", "value": "msgs" },
    { "op": "StoreVar", "value": "$s999" },
    { "op": "LoadVar", "value": "$s999" },
    { "op": "Nary", "arity": 1, "value": "IsEmpty" },
    { "op": "JumpCond", "pc": "1021", "cond": { "type": "bool", "value": "True" } },
    { "op": "Cut", "set": "$s999", "var": "(r, e)" },
    { "op": "LoadVar", "value": "r" },
    { "op": "LoadVar", "value": "round" },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "JumpCond", "pc": "1001", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "e" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "LoadVar", "value": "r" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": "1" } },
    { "op": "LoadVar", "value": "e" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "LoadVar", "value": "msgs" },
    { "op": "Apply" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Jump", "pc": "1001" },
    { "op": "DelVar", "value": "r" },
    { "op": "DelVar", "value": "e" },
    { "op": "DelVar", "value": "$s999" },
    { "op": "StoreVar", "value": "m" },
    { "op": "Push", "value": { "type": "dict", "value": [{ "key": { "type": "int", "value": "0" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "int", "value": "1" }, "value": { "type": "int", "value": "0" } }] } },
    { "op": "StoreVar", "value": "count" },
    { "op": "Load", "value": [{ "type": "atom", "value": "selection" }] },
    { "op": "Push", "value": { "type": "pc", "value": "416" } },
    { "op": "Apply" },
    { "op": "Push", "value": { "type": "int", "value": "3" } },
    { "op": "Nary", "arity": 2, "value": "<" },
    { "op": "JumpCond", "pc": "1057", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "m" },
    { "op": "Push", "value": { "type": "pc", "value": "443" } },
    { "op": "Apply" },
    { "op": "StoreVar", "value": "e" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "LoadVar", "value": "m" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "int", "value": "1" } },
    { "op": "LoadVar", "value": "e" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "pc", "value": "574" } },
    { "op": "Apply" },
    { "op": "StoreVar", "value": "m" },
    { "op": "Push", "value": { "type": "address", "value": [{ "type": "atom", "value": "count" }] } },
    { "op": "LoadVar", "value": "e" },
    { "op": "Address" },
    { "op": "Dup" },
    { "op": "LoadVar" },
    { "op": "Push", "value": { "type": "int", "value": "1" } },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "StoreVar" },
    { "op": "DelVar", "value": "e" },
    { "op": "Jump", "pc": "1027" },
    { "op": "ReadonlyInc" },
    { "op": "AtomicInc" },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "LoadVar", "value": "count" },
    { "op": "Apply" },
    { "op": "Push", "value": { "type": "int", "value": "1" } },
    { "op": "LoadVar", "value": "count" },
    { "op": "Apply" },
    { "op": "Nary", "arity": 2, "value": "!=" },
    { "op": "Assert" },
    { "op": "AtomicDec" },
    { "op": "ReadonlyDec" },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "LoadVar", "value": "count" },
    { "op": "Apply" },
    { "op": "Push", "value": { "type": "int", "value": "1" } },
    { "op": "LoadVar", "value": "count" },
    { "op": "Apply" },
    { "op": "Nary", "arity": 2, "value": "<" },
    { "op": "JumpCond", "pc": "1079", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "Jump", "pc": "1080" },
    { "op": "Push", "value": { "type": "int", "value": "1" } },
    { "op": "StoreVar", "value": "est" },
    { "op": "LoadVar", "value": "est" },
    { "op": "LoadVar", "value": "count" },
    { "op": "Apply" },
    { "op": "Push", "value": { "type": "int", "value": "3" } },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "JumpCond", "pc": "1105", "cond": { "type": "bool", "value": "False" } },
    { "op": "AtomicInc" },
    { "op": "Load", "value": [{ "type": "atom", "value": "decisions" }] },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "LoadVar", "value": "est" },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Nary", "arity": 2, "value": "|" },
    { "op": "Store", "value": [{ "type": "atom", "value": "decisions" }] },
    { "op": "ReadonlyInc" },
    { "op": "AtomicInc" },
    { "op": "Load", "value": [{ "type": "atom", "value": "decisions" }] },
    { "op": "Nary", "arity": 1, "value": "len" },
    { "op": "Push", "value": { "type": "int", "value": "1" } },
    { "op": "Nary", "arity": 2, "value": "<=" },
    { "op": "Assert" },
    { "op": "AtomicDec" },
    { "op": "ReadonlyDec" },
    { "op": "AtomicDec" },
    { "op": "Jump", "pc": "1105" },
    { "op": "DelVar", "value": "msgs" },
    { "op": "DelVar", "value": "m" },
    { "op": "DelVar", "value": "count" },
    { "op": "Jump", "pc": "980" },
    { "op": "DelVar", "value": "round" },
    { "op": "DelVar", "value": "$s978" },
    { "op": "DelVar", "value": "est" },
    { "op": "Return" },
    { "op": "Push", "value": { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" }] } },
    { "op": "Choose" },
    { "op": "StoreVar", "value": "nzeroes" },
    { "op": "Push", "value": { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" }] } },
    { "op": "StoreVar", "value": "$s1116" },
    { "op": "LoadVar", "value": "$s1116" },
    { "op": "Nary", "arity": 1, "value": "IsEmpty" },
    { "op": "JumpCond", "pc": "1133", "cond": { "type": "bool", "value": "True" } },
    { "op": "Cut", "set": "$s1116", "var": "i" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "LoadVar", "value": "i" },
    { "op": "LoadVar", "value": "nzeroes" },
    { "op": "Nary", "arity": 2, "value": "<" },
    { "op": "JumpCond", "pc": "1129", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "int", "value": "0" } },
    { "op": "Jump", "pc": "1130" },
    { "op": "Push", "value": { "type": "int", "value": "1" } },
    { "op": "Push", "value": { "type": "pc", "value": "975" } },
    { "op": "Spawn" },
    { "op": "Jump", "pc": "1118" },
    { "op": "DelVar", "value": "i" },
    { "op": "DelVar", "value": "$s1116" },
    { "op": "DelVar", "value": "nzeroes" },
    { "op": "Return" }
  ],
  "pretty": [
    ["Frame __init__ ()","start of method __init__"],
    ["Push ()","push constant ()"],
    ["Store synch","pop a value and store it in shared variable synch"],
    ["Push ()","push constant ()"],
    ["Store list","pop a value and store it in shared variable list"],
    ["Jump 327","set program counter to 327"],
    ["Frame subseq (s, b, e)","start of method subseq"],
    ["Push 0","push constant 0"],
    ["StoreVar $n7","pop a value and store in $n7"],
    ["Push ()","push constant ()"],
    ["LoadVar b","push the value of b"],
    ["LoadVar e","push the value of e"],
    ["Push 1","push constant 1"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["2-ary ..","pop 2 values and push the result of applying .."],
    ["StoreVar $s10","pop a value and store in $s10"],
    ["LoadVar $s10","push the value of $s10"],
    ["1-ary IsEmpty","pop 1 value and push the result of applying IsEmpty"],
    ["JumpCond True 27","pop a value and jump to 27 if the value is True"],
    ["Cut($s10, x)","remove smallest element from $s10 and assign to x"],
    ["LoadVar $n7","push the value of $n7"],
    ["LoadVar x","push the value of x"],
    ["LoadVar s","push the value of s"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["IncVar $n7","increment the value of $n7"],
    ["Jump 16","set program counter to 16"],
    ["DelVar x","delete method variable x"],
    ["DelVar $s10","delete method variable $s10"],
    ["StoreVar result","pop a value and store in result"],
    ["Return","restore caller method state and push result"],
    ["Jump 327","set program counter to 327"],
    ["Frame append (s, e)","start of method append"],
    ["LoadVar s","push the value of s"],
    ["Push ()","push constant ()"],
    ["Push 0","push constant 0"],
    ["LoadVar e","push the value of e"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["StoreVar result","pop a value and store in result"],
    ["Return","restore caller method state and push result"],
    ["Jump 327","set program counter to 327"],
    ["Frame head s","start of method head"],
    ["Push 0","push constant 0"],
    ["LoadVar s","push the value of s"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["StoreVar result","pop a value and store in result"],
    ["Return","restore caller method state and push result"],
    ["Jump 327","set program counter to 327"],
    ["Frame tail s","start of method tail"],
    ["Push ()","push constant ()"],
    ["Push 0","push constant 0"],
    ["LoadVar s","push the value of s"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 1","push constant 1"],
    ["Push 1","push constant 1"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 2","push constant 2"],
    ["LoadVar s","push the value of s"],
    ["1-ary len","pop 1 value and push the result of applying len"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push PC(6)","push constant PC(6)"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["StoreVar result","pop a value and store in result"],
    ["Return","restore caller method state and push result"],
    ["Jump 327","set program counter to 327"],
    ["Frame sum a","start of method sum"],
    ["Push 0","push constant 0"],
    ["StoreVar result","pop a value and store in result"],
    ["LoadVar a","push the value of a"],
    ["StoreVar $s69","pop a value and store in $s69"],
    ["LoadVar $s69","push the value of $s69"],
    ["1-ary IsEmpty","pop 1 value and push the result of applying IsEmpty"],
    ["JumpCond True 80","pop a value and jump to 80 if the value is True"],
    ["Cut($s69, v)","remove smallest element from $s69 and assign to v"],
    ["LoadVar result","push the value of result"],
    ["LoadVar v","push the value of v"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["StoreVar result","pop a value and store in result"],
    ["Jump 71","set program counter to 71"],
    ["DelVar v","delete method variable v"],
    ["DelVar $s69","delete method variable $s69"],
    ["Return","restore caller method state and push result"],
    ["Jump 327","set program counter to 327"],
    ["Frame set a","start of method set"],
    ["Push {}","push constant {}"],
    ["LoadVar a","push the value of a"],
    ["StoreVar $s86","pop a value and store in $s86"],
    ["LoadVar $s86","push the value of $s86"],
    ["1-ary IsEmpty","pop 1 value and push the result of applying IsEmpty"],
    ["JumpCond True 95","pop a value and jump to 95 if the value is True"],
    ["Cut($s86, v)","remove smallest element from $s86 and assign to v"],
    ["LoadVar v","push the value of v"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Jump 88","set program counter to 88"],
    ["DelVar v","delete method variable v"],
    ["DelVar $s86","delete method variable $s86"],
    ["StoreVar result","pop a value and store in result"],
    ["Return","restore caller method state and push result"],
    ["Jump 327","set program counter to 327"],
    ["Frame list a","start of method list"],
    ["Push 0","push constant 0"],
    ["StoreVar $n101","pop a value and store in $n101"],
    ["Push ()","push constant ()"],
    ["LoadVar a","push the value of a"],
    ["StoreVar $s104","pop a value and store in $s104"],
    ["LoadVar $s104","push the value of $s104"],
    ["1-ary IsEmpty","pop 1 value and push the result of applying IsEmpty"],
    ["JumpCond True 115","pop a value and jump to 115 if the value is True"],
    ["Cut($s104, v)","remove smallest element from $s104 and assign to v"],
    ["LoadVar $n101","push the value of $n101"],
    ["LoadVar v","push the value of v"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["IncVar $n101","increment the value of $n101"],
    ["Jump 106","set program counter to 106"],
    ["DelVar v","delete method variable v"],
    ["DelVar $s104","delete method variable $s104"],
    ["StoreVar result","pop a value and store in result"],
    ["Return","restore caller method state and push result"],
    ["Jump 327","set program counter to 327"],
    ["Frame values d","start of method values"],
    ["Push 0","push constant 0"],
    ["StoreVar $n121","pop a value and store in $n121"],
    ["Push ()","push constant ()"],
    ["LoadVar d","push the value of d"],
    ["1-ary keys","pop 1 value and push the result of applying keys"],
    ["StoreVar $s124","pop a value and store in $s124"],
    ["LoadVar $s124","push the value of $s124"],
    ["1-ary IsEmpty","pop 1 value and push the result of applying IsEmpty"],
    ["JumpCond True 138","pop a value and jump to 138 if the value is True"],
    ["Cut($s124, k)","remove smallest element from $s124 and assign to k"],
    ["LoadVar $n121","push the value of $n121"],
    ["LoadVar k","push the value of k"],
    ["LoadVar d","push the value of d"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["IncVar $n121","increment the value of $n121"],
    ["Jump 127","set program counter to 127"],
    ["DelVar k","delete method variable k"],
    ["DelVar $s124","delete method variable $s124"],
    ["StoreVar result","pop a value and store in result"],
    ["Return","restore caller method state and push result"],
    ["Jump 327","set program counter to 327"],
    ["Frame items d","start of method items"],
    ["Push 0","push constant 0"],
    ["StoreVar $n144","pop a value and store in $n144"],
    ["Push ()","push constant ()"],
    ["LoadVar d","push the value of d"],
    ["1-ary keys","pop 1 value and push the result of applying keys"],
    ["StoreVar $s147","pop a value and store in $s147"],
    ["LoadVar $s147","push the value of $s147"],
    ["1-ary IsEmpty","pop 1 value and push the result of applying IsEmpty"],
    ["JumpCond True 167","pop a value and jump to 167 if the value is True"],
    ["Cut($s147, k)","remove smallest element from $s147 and assign to k"],
    ["LoadVar $n144","push the value of $n144"],
    ["Push ()","push constant ()"],
    ["Push 0","push constant 0"],
    ["LoadVar k","push the value of k"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 1","push constant 1"],
    ["LoadVar k","push the value of k"],
    ["LoadVar d","push the value of d"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["IncVar $n144","increment the value of $n144"],
    ["Jump 150","set program counter to 150"],
    ["DelVar k","delete method variable k"],
    ["DelVar $s147","delete method variable $s147"],
    ["StoreVar result","pop a value and store in result"],
    ["Return","restore caller method state and push result"],
    ["Jump 327","set program counter to 327"],
    ["Frame enumerate d","start of method enumerate"],
    ["Push ()","push constant ()"],
    ["StoreVar result","pop a value and store in result"],
    ["Push 0","push constant 0"],
    ["StoreVar index","pop a value and store in index"],
    ["LoadVar d","push the value of d"],
    ["1-ary keys","pop 1 value and push the result of applying keys"],
    ["StoreVar $s177","pop a value and store in $s177"],
    ["LoadVar $s177","push the value of $s177"],
    ["1-ary IsEmpty","pop 1 value and push the result of applying IsEmpty"],
    ["JumpCond True 204","pop a value and jump to 204 if the value is True"],
    ["Cut($s177, k)","remove smallest element from $s177 and assign to k"],
    ["LoadVar result","push the value of result"],
    ["Push ()","push constant ()"],
    ["Push 0","push constant 0"],
    ["Push ()","push constant ()"],
    ["Push 0","push constant 0"],
    ["LoadVar index","push the value of index"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 1","push constant 1"],
    ["LoadVar k","push the value of k"],
    ["LoadVar d","push the value of d"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["StoreVar result","pop a value and store in result"],
    ["LoadVar index","push the value of index"],
    ["Push 1","push constant 1"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["StoreVar index","pop a value and store in index"],
    ["Jump 180","set program counter to 180"],
    ["DelVar k","delete method variable k"],
    ["DelVar $s177","delete method variable $s177"],
    ["DelVar index","delete method variable index"],
    ["Return","restore caller method state and push result"],
    ["Jump 327","set program counter to 327"],
    ["Frame qsort a","start of method qsort"],
    ["LoadVar a","push the value of a"],
    ["Push ()","push constant ()"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["JumpCond False 217","pop a value and jump to 217 if the value is False"],
    ["Push ()","push constant ()"],
    ["StoreVar result","pop a value and store in result"],
    ["Jump 287","set program counter to 287"],
    ["Push ()","push constant ()"],
    ["Push 0","push constant 0"],
    ["LoadVar a","push the value of a"],
    ["Push PC(42)","push constant PC(42)"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 1","push constant 1"],
    ["LoadVar a","push the value of a"],
    ["Push PC(49)","push constant PC(49)"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["StoreVar (pivot, rest)","pop a value and store in (pivot, rest)"],
    ["Push 0","push constant 0"],
    ["StoreVar $n229","pop a value and store in $n229"],
    ["Push ()","push constant ()"],
    ["LoadVar rest","push the value of rest"],
    ["StoreVar $s232","pop a value and store in $s232"],
    ["LoadVar $s232","push the value of $s232"],
    ["1-ary IsEmpty","pop 1 value and push the result of applying IsEmpty"],
    ["JumpCond True 247","pop a value and jump to 247 if the value is True"],
    ["Cut($s232, v)","remove smallest element from $s232 and assign to v"],
    ["LoadVar v","push the value of v"],
    ["LoadVar pivot","push the value of pivot"],
    ["2-ary <","pop 2 values and push the result of applying <"],
    ["JumpCond False 234","pop a value and jump to 234 if the value is False"],
    ["LoadVar $n229","push the value of $n229"],
    ["LoadVar v","push the value of v"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["IncVar $n229","increment the value of $n229"],
    ["Jump 234","set program counter to 234"],
    ["DelVar v","delete method variable v"],
    ["DelVar $s232","delete method variable $s232"],
    ["StoreVar lower","pop a value and store in lower"],
    ["Push 0","push constant 0"],
    ["StoreVar $n250","pop a value and store in $n250"],
    ["Push ()","push constant ()"],
    ["LoadVar rest","push the value of rest"],
    ["StoreVar $s253","pop a value and store in $s253"],
    ["LoadVar $s253","push the value of $s253"],
    ["1-ary IsEmpty","pop 1 value and push the result of applying IsEmpty"],
    ["JumpCond True 268","pop a value and jump to 268 if the value is True"],
    ["Cut($s253, v)","remove smallest element from $s253 and assign to v"],
    ["LoadVar v","push the value of v"],
    ["LoadVar pivot","push the value of pivot"],
    ["2-ary >=","pop 2 values and push the result of applying >="],
    ["JumpCond False 255","pop a value and jump to 255 if the value is False"],
    ["LoadVar $n250","push the value of $n250"],
    ["LoadVar v","push the value of v"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["IncVar $n250","increment the value of $n250"],
    ["Jump 255","set program counter to 255"],
    ["DelVar v","delete method variable v"],
    ["DelVar $s253","delete method variable $s253"],
    ["StoreVar higher","pop a value and store in higher"],
    ["LoadVar lower","push the value of lower"],
    ["Push PC(209)","push constant PC(209)"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["Push ()","push constant ()"],
    ["Push 0","push constant 0"],
    ["LoadVar pivot","push the value of pivot"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["LoadVar higher","push the value of higher"],
    ["Push PC(209)","push constant PC(209)"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["3-ary +","pop 3 values and push the result of applying +"],
    ["StoreVar result","pop a value and store in result"],
    ["DelVar pivot","delete method variable pivot"],
    ["DelVar rest","delete method variable rest"],
    ["DelVar lower","delete method variable lower"],
    ["DelVar higher","delete method variable higher"],
    ["Return","restore caller method state and push result"],
    ["Jump 327","set program counter to 327"],
    ["Frame sorted d","start of method sorted"],
    ["LoadVar d","push the value of d"],
    ["Push PC(100)","push constant PC(100)"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["Push PC(209)","push constant PC(209)"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["StoreVar result","pop a value and store in result"],
    ["Return","restore caller method state and push result"],
    ["Jump 327","set program counter to 327"],
    ["Frame reversed d","start of method reversed"],
    ["LoadVar d","push the value of d"],
    ["1-ary len","pop 1 value and push the result of applying len"],
    ["StoreVar n","pop a value and store in n"],
    ["Push 0","push constant 0"],
    ["StoreVar $n302","pop a value and store in $n302"],
    ["Push ()","push constant ()"],
    ["Push 1","push constant 1"],
    ["LoadVar n","push the value of n"],
    ["2-ary ..","pop 2 values and push the result of applying .."],
    ["StoreVar $s305","pop a value and store in $s305"],
    ["LoadVar $s305","push the value of $s305"],
    ["1-ary IsEmpty","pop 1 value and push the result of applying IsEmpty"],
    ["JumpCond True 322","pop a value and jump to 322 if the value is True"],
    ["Cut($s305, i)","remove smallest element from $s305 and assign to i"],
    ["LoadVar $n302","push the value of $n302"],
    ["LoadVar n","push the value of n"],
    ["LoadVar i","push the value of i"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["LoadVar d","push the value of d"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["IncVar $n302","increment the value of $n302"],
    ["Jump 309","set program counter to 309"],
    ["DelVar i","delete method variable i"],
    ["DelVar $s305","delete method variable $s305"],
    ["StoreVar result","pop a value and store in result"],
    ["DelVar n","delete method variable n"],
    ["Return","restore caller method state and push result"],
    ["Push ()","push constant ()"],
    ["Store bag","pop a value and store it in shared variable bag"],
    ["Jump 901","set program counter to 901"],
    ["Frame empty ()","start of method empty"],
    ["Push ()","push constant ()"],
    ["StoreVar result","pop a value and store in result"],
    ["Return","restore caller method state and push result"],
    ["Jump 901","set program counter to 901"],
    ["Frame fromSet s","start of method fromSet"],
    ["Push ()","push constant ()"],
    ["LoadVar s","push the value of s"],
    ["StoreVar $s337","pop a value and store in $s337"],
    ["LoadVar $s337","push the value of $s337"],
    ["1-ary IsEmpty","pop 1 value and push the result of applying IsEmpty"],
    ["JumpCond True 347","pop a value and jump to 347 if the value is True"],
    ["Cut($s337, elt)","remove smallest element from $s337 and assign to elt"],
    ["LoadVar elt","push the value of elt"],
    ["Push 1","push constant 1"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Jump 339","set program counter to 339"],
    ["DelVar elt","delete method variable elt"],
    ["DelVar $s337","delete method variable $s337"],
    ["StoreVar result","pop a value and store in result"],
    ["Return","restore caller method state and push result"],
    ["Jump 901","set program counter to 901"],
    ["Frame fromList a","start of method fromList"],
    ["Push ()","push constant ()"],
    ["StoreVar result","pop a value and store in result"],
    ["LoadVar a","push the value of a"],
    ["1-ary keys","pop 1 value and push the result of applying keys"],
    ["StoreVar $s355","pop a value and store in $s355"],
    ["LoadVar $s355","push the value of $s355"],
    ["1-ary IsEmpty","pop 1 value and push the result of applying IsEmpty"],
    ["JumpCond True 388","pop a value and jump to 388 if the value is True"],
    ["Cut($s355, i)","remove smallest element from $s355 and assign to i"],
    ["LoadVar i","push the value of i"],
    ["LoadVar a","push the value of a"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["LoadVar result","push the value of result"],
    ["1-ary keys","pop 1 value and push the result of applying keys"],
    ["2-ary in","pop 2 values and push the result of applying in"],
    ["JumpCond False 380","pop a value and jump to 380 if the value is False"],
    ["Push ?result","push constant ?result"],
    ["LoadVar i","push the value of i"],
    ["LoadVar a","push the value of a"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Dup","push a copy of the top value on the stack"],
    ["LoadVar","pop the address of a method variable and push the value of that variable"],
    ["Push 1","push constant 1"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["StoreVar","pop a value and the address of a method variable and store the value at that address"],
    ["Jump 358","set program counter to 358"],
    ["Push ?result","push constant ?result"],
    ["LoadVar i","push the value of i"],
    ["LoadVar a","push the value of a"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Push 1","push constant 1"],
    ["StoreVar","pop a value and the address of a method variable and store the value at that address"],
    ["Jump 358","set program counter to 358"],
    ["DelVar i","delete method variable i"],
    ["DelVar $s355","delete method variable $s355"],
    ["Return","restore caller method state and push result"],
    ["Jump 901","set program counter to 901"],
    ["Frame count (bg, elt)","start of method count"],
    ["ReadonlyInc","increment readonly counter of context; thread cannot mutate shared variables if > 0"],
    ["AtomicInc","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Push 0","push constant 0"],
    ["LoadVar bg","push the value of bg"],
    ["2-ary in","pop 2 values and push the result of applying in"],
    ["1-ary not","pop 1 value and push the result of applying not"],
    ["Assert","pop a condition and raise exception if condition is false"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["LoadVar elt","push the value of elt"],
    ["LoadVar bg","push the value of bg"],
    ["1-ary keys","pop 1 value and push the result of applying keys"],
    ["2-ary in","pop 2 values and push the result of applying in"],
    ["JumpCond False 412","pop a value and jump to 412 if the value is False"],
    ["LoadVar elt","push the value of elt"],
    ["LoadVar bg","push the value of bg"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["StoreVar result","pop a value and store in result"],
    ["Jump 414","set program counter to 414"],
    ["Push 0","push constant 0"],
    ["StoreVar result","pop a value and store in result"],
    ["Return","restore caller method state and push result"],
    ["Jump 901","set program counter to 901"],
    ["Frame size bg","start of method size"],
    ["ReadonlyInc","increment readonly counter of context; thread cannot mutate shared variables if > 0"],
    ["AtomicInc","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Push 0","push constant 0"],
    ["LoadVar bg","push the value of bg"],
    ["2-ary in","pop 2 values and push the result of applying in"],
    ["1-ary not","pop 1 value and push the result of applying not"],
    ["Assert","pop a condition and raise exception if condition is false"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["Push 0","push constant 0"],
    ["StoreVar result","pop a value and store in result"],
    ["LoadVar bg","push the value of bg"],
    ["StoreVar $s428","pop a value and store in $s428"],
    ["LoadVar $s428","push the value of $s428"],
    ["1-ary IsEmpty","pop 1 value and push the result of applying IsEmpty"],
    ["JumpCond True 439","pop a value and jump to 439 if the value is True"],
    ["Cut($s428, c)","remove smallest element from $s428 and assign to c"],
    ["LoadVar result","push the value of result"],
    ["LoadVar c","push the value of c"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["StoreVar result","pop a value and store in result"],
    ["Jump 430","set program counter to 430"],
    ["DelVar c","delete method variable c"],
    ["DelVar $s428","delete method variable $s428"],
    ["Return","restore caller method state and push result"],
    ["Jump 901","set program counter to 901"],
    ["Frame bchoose bg","start of method bchoose"],
    ["ReadonlyInc","increment readonly counter of context; thread cannot mutate shared variables if > 0"],
    ["AtomicInc","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Push 0","push constant 0"],
    ["LoadVar bg","push the value of bg"],
    ["2-ary in","pop 2 values and push the result of applying in"],
    ["1-ary not","pop 1 value and push the result of applying not"],
    ["Assert","pop a condition and raise exception if condition is false"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["LoadVar bg","push the value of bg"],
    ["1-ary keys","pop 1 value and push the result of applying keys"],
    ["Choose","pop a set value and push one of its elements"],
    ["StoreVar result","pop a value and store in result"],
    ["Return","restore caller method state and push result"],
    ["Jump 901","set program counter to 901"],
    ["Frame add (pb, elt)","start of method add"],
    ["ReadonlyInc","increment readonly counter of context; thread cannot mutate shared variables if > 0"],
    ["AtomicInc","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Push 0","push constant 0"],
    ["LoadVar pb","push the value of pb"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary in","pop 2 values and push the result of applying in"],
    ["1-ary not","pop 1 value and push the result of applying not"],
    ["Assert","pop a condition and raise exception if condition is false"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["LoadVar elt","push the value of elt"],
    ["LoadVar pb","push the value of pb"],
    ["Load","pop an address and push the value at the address"],
    ["1-ary keys","pop 1 value and push the result of applying keys"],
    ["2-ary in","pop 2 values and push the result of applying in"],
    ["JumpCond False 485","pop a value and jump to 485 if the value is False"],
    ["LoadVar pb","push the value of pb"],
    ["LoadVar elt","push the value of elt"],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Dup","push a copy of the top value on the stack"],
    ["Load","pop an address and push the value at the address"],
    ["Push 1","push constant 1"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["Store","pop a value and an address and store the value at the address"],
    ["Jump 490","set program counter to 490"],
    ["LoadVar pb","push the value of pb"],
    ["LoadVar elt","push the value of elt"],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Push 1","push constant 1"],
    ["Store","pop a value and an address and store the value at the address"],
    ["Return","restore caller method state and push result"],
    ["Jump 901","set program counter to 901"],
    ["Frame f_add (bg, elt)","start of method f_add"],
    ["ReadonlyInc","increment readonly counter of context; thread cannot mutate shared variables if > 0"],
    ["AtomicInc","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Push 0","push constant 0"],
    ["LoadVar bg","push the value of bg"],
    ["2-ary in","pop 2 values and push the result of applying in"],
    ["1-ary not","pop 1 value and push the result of applying not"],
    ["Assert","pop a condition and raise exception if condition is false"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["LoadVar bg","push the value of bg"],
    ["StoreVar result","pop a value and store in result"],
    ["LoadVar elt","push the value of elt"],
    ["LoadVar result","push the value of result"],
    ["1-ary keys","pop 1 value and push the result of applying keys"],
    ["2-ary in","pop 2 values and push the result of applying in"],
    ["JumpCond False 518","pop a value and jump to 518 if the value is False"],
    ["Push ?result","push constant ?result"],
    ["LoadVar elt","push the value of elt"],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Dup","push a copy of the top value on the stack"],
    ["LoadVar","pop the address of a method variable and push the value of that variable"],
    ["Push 1","push constant 1"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["StoreVar","pop a value and the address of a method variable and store the value at that address"],
    ["Jump 523","set program counter to 523"],
    ["Push ?result","push constant ?result"],
    ["LoadVar elt","push the value of elt"],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Push 1","push constant 1"],
    ["StoreVar","pop a value and the address of a method variable and store the value at that address"],
    ["Return","restore caller method state and push result"],
    ["Jump 901","set program counter to 901"],
    ["Frame remove (pb, elt)","start of method remove"],
    ["ReadonlyInc","increment readonly counter of context; thread cannot mutate shared variables if > 0"],
    ["AtomicInc","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Push 0","push constant 0"],
    ["LoadVar pb","push the value of pb"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary in","pop 2 values and push the result of applying in"],
    ["1-ary not","pop 1 value and push the result of applying not"],
    ["Assert","pop a condition and raise exception if condition is false"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["LoadVar elt","push the value of elt"],
    ["LoadVar pb","push the value of pb"],
    ["Load","pop an address and push the value at the address"],
    ["1-ary keys","pop 1 value and push the result of applying keys"],
    ["2-ary in","pop 2 values and push the result of applying in"],
    ["JumpCond False 549","pop a value and jump to 549 if the value is False"],
    ["LoadVar pb","push the value of pb"],
    ["LoadVar elt","push the value of elt"],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Load","pop an address and push the value at the address"],
    ["Push 0","push constant 0"],
    ["2-ary >","pop 2 values and push the result of applying >"],
    ["Jump 550","set program counter to 550"],
    ["Push False","push constant False"],
    ["JumpCond False 560","pop a value and jump to 560 if the value is False"],
    ["LoadVar pb","push the value of pb"],
    ["LoadVar elt","push the value of elt"],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Dup","push a copy of the top value on the stack"],
    ["Load","pop an address and push the value at the address"],
    ["Push 1","push constant 1"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["Store","pop a value and an address and store the value at the address"],
    ["Jump 560","set program counter to 560"],
    ["LoadVar pb","push the value of pb"],
    ["LoadVar elt","push the value of elt"],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Load","pop an address and push the value at the address"],
    ["Push 0","push constant 0"],
    ["2-ary <=","pop 2 values and push the result of applying <="],
    ["JumpCond False 572","pop a value and jump to 572 if the value is False"],
    ["LoadVar pb","push the value of pb"],
    ["LoadVar elt","push the value of elt"],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Del","pop an address and delete the shared variable at the address"],
    ["Jump 572","set program counter to 572"],
    ["Return","restore caller method state and push result"],
    ["Jump 901","set program counter to 901"],
    ["Frame f_remove (bg, elt)","start of method f_remove"],
    ["ReadonlyInc","increment readonly counter of context; thread cannot mutate shared variables if > 0"],
    ["AtomicInc","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Push 0","push constant 0"],
    ["LoadVar bg","push the value of bg"],
    ["2-ary in","pop 2 values and push the result of applying in"],
    ["1-ary not","pop 1 value and push the result of applying not"],
    ["Assert","pop a condition and raise exception if condition is false"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["LoadVar bg","push the value of bg"],
    ["StoreVar result","pop a value and store in result"],
    ["LoadVar elt","push the value of elt"],
    ["LoadVar result","push the value of result"],
    ["1-ary keys","pop 1 value and push the result of applying keys"],
    ["2-ary in","pop 2 values and push the result of applying in"],
    ["JumpCond False 597","pop a value and jump to 597 if the value is False"],
    ["LoadVar elt","push the value of elt"],
    ["LoadVar result","push the value of result"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["Push 0","push constant 0"],
    ["2-ary >","pop 2 values and push the result of applying >"],
    ["Jump 598","set program counter to 598"],
    ["Push False","push constant False"],
    ["JumpCond False 608","pop a value and jump to 608 if the value is False"],
    ["Push ?result","push constant ?result"],
    ["LoadVar elt","push the value of elt"],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Dup","push a copy of the top value on the stack"],
    ["LoadVar","pop the address of a method variable and push the value of that variable"],
    ["Push 1","push constant 1"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["StoreVar","pop a value and the address of a method variable and store the value at that address"],
    ["Jump 608","set program counter to 608"],
    ["LoadVar elt","push the value of elt"],
    ["LoadVar result","push the value of result"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["Push 0","push constant 0"],
    ["2-ary <=","pop 2 values and push the result of applying <="],
    ["JumpCond False 619","pop a value and jump to 619 if the value is False"],
    ["Push ?result","push constant ?result"],
    ["LoadVar elt","push the value of elt"],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["DelVar","pop an address of a method variable and delete that variable"],
    ["Jump 619","set program counter to 619"],
    ["Return","restore caller method state and push result"],
    ["Jump 901","set program counter to 901"],
    ["Frame tas lk","start of method tas"],
    ["AtomicInc","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["LoadVar lk","push the value of lk"],
    ["Load","pop an address and push the value at the address"],
    ["StoreVar result","pop a value and store in result"],
    ["LoadVar lk","push the value of lk"],
    ["Push True","push constant True"],
    ["Store","pop a value and an address and store the value at the address"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Return","restore caller method state and push result"],
    ["Jump 901","set program counter to 901"],
    ["Frame cas (p, old, new)","start of method cas"],
    ["AtomicInc","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["LoadVar p","push the value of p"],
    ["Load","pop an address and push the value at the address"],
    ["LoadVar old","push the value of old"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["StoreVar result","pop a value and store in result"],
    ["LoadVar result","push the value of result"],
    ["JumpCond False 645","pop a value and jump to 645 if the value is False"],
    ["LoadVar p","push the value of p"],
    ["LoadVar new","push the value of new"],
    ["Store","pop a value and an address and store the value at the address"],
    ["Jump 645","set program counter to 645"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Return","restore caller method state and push result"],
    ["Jump 901","set program counter to 901"],
    ["Frame BinSema acquired","start of method BinSema"],
    ["LoadVar acquired","push the value of acquired"],
    ["StoreVar result","pop a value and store in result"],
    ["Return","restore caller method state and push result"],
    ["Jump 901","set program counter to 901"],
    ["Frame Lock ()","start of method Lock"],
    ["Push False","push constant False"],
    ["Push PC(648)","push constant PC(648)"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["StoreVar result","pop a value and store in result"],
    ["Return","restore caller method state and push result"],
    ["Jump 901","set program counter to 901"],
    ["Frame acquired binsema","start of method acquired"],
    ["LoadVar binsema","push the value of binsema"],
    ["Load","pop an address and push the value at the address"],
    ["StoreVar result","pop a value and store in result"],
    ["Return","restore caller method state and push result"],
    ["Jump 901","set program counter to 901"],
    ["Frame acquire binsema","start of method acquire"],
    ["LoadVar binsema","push the value of binsema"],
    ["Push PC(621)","push constant PC(621)"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["JumpCond True 667","pop a value and jump to 667 if the value is True"],
    ["Return","restore caller method state and push result"],
    ["Jump 901","set program counter to 901"],
    ["Frame release binsema","start of method release"],
    ["AtomicInc","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["ReadonlyInc","increment readonly counter of context; thread cannot mutate shared variables if > 0"],
    ["AtomicInc","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["LoadVar binsema","push the value of binsema"],
    ["Load","pop an address and push the value at the address"],
    ["Assert","pop a condition and raise exception if condition is false"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["LoadVar binsema","push the value of binsema"],
    ["Push False","push constant False"],
    ["Store","pop a value and an address and store the value at the address"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Return","restore caller method state and push result"],
    ["Jump 901","set program counter to 901"],
    ["Frame held binsema","start of method held"],
    ["LoadVar binsema","push the value of binsema"],
    ["Load","pop an address and push the value at the address"],
    ["StoreVar result","pop a value and store in result"],
    ["Return","restore caller method state and push result"],
    ["Jump 901","set program counter to 901"],
    ["Frame Condition ()","start of method Condition"],
    ["Push ()","push constant ()"],
    ["Push PC(330)","push constant PC(330)"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["StoreVar result","pop a value and store in result"],
    ["Return","restore caller method state and push result"],
    ["Jump 901","set program counter to 901"],
    ["Frame wait (c, lk)","start of method wait"],
    ["Push ()","push constant ()"],
    ["Push 0","push constant 0"],
    ["Push True","push constant True"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 1","push constant 1"],
    ["Push 0","push constant 0"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 2","push constant 2"],
    ["Push ()","push constant ()"],
    ["1-ary get_context","pop 1 value and push the result of applying get_context"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["StoreVar (blocked, cnt, ctx)","pop a value and store in (blocked, cnt, ctx)"],
    ["AtomicInc","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Push ()","push constant ()"],
    ["Push 0","push constant 0"],
    ["LoadVar c","push the value of c"],
    ["Load","pop an address and push the value at the address"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 1","push constant 1"],
    ["LoadVar ctx","push the value of ctx"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push PC(392)","push constant PC(392)"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["StoreVar cnt","pop a value and store in cnt"],
    ["Push ()","push constant ()"],
    ["Push 0","push constant 0"],
    ["LoadVar c","push the value of c"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 1","push constant 1"],
    ["LoadVar ctx","push the value of ctx"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push PC(459)","push constant PC(459)"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["Pop","discard the top value on the stack"],
    ["LoadVar lk","push the value of lk"],
    ["Push False","push constant False"],
    ["Store","pop a value and an address and store the value at the address"],
    ["AtomicDec","decrement atomic counter of context"],
    ["LoadVar blocked","push the value of blocked"],
    ["JumpCond False 770","pop a value and jump to 770 if the value is False"],
    ["AtomicInc","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["LoadVar lk","push the value of lk"],
    ["Load","pop an address and push the value at the address"],
    ["1-ary not","pop 1 value and push the result of applying not"],
    ["JumpCond False 760","pop a value and jump to 760 if the value is False"],
    ["Push ()","push constant ()"],
    ["Push 0","push constant 0"],
    ["LoadVar c","push the value of c"],
    ["Load","pop an address and push the value at the address"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 1","push constant 1"],
    ["LoadVar ctx","push the value of ctx"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push PC(392)","push constant PC(392)"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["LoadVar cnt","push the value of cnt"],
    ["2-ary <=","pop 2 values and push the result of applying <="],
    ["Jump 761","set program counter to 761"],
    ["Push False","push constant False"],
    ["JumpCond False 768","pop a value and jump to 768 if the value is False"],
    ["LoadVar lk","push the value of lk"],
    ["Push True","push constant True"],
    ["Store","pop a value and an address and store the value at the address"],
    ["Push False","push constant False"],
    ["StoreVar blocked","pop a value and store in blocked"],
    ["Jump 768","set program counter to 768"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Jump 740","set program counter to 740"],
    ["DelVar blocked","delete method variable blocked"],
    ["DelVar cnt","delete method variable cnt"],
    ["DelVar ctx","delete method variable ctx"],
    ["Return","restore caller method state and push result"],
    ["Jump 901","set program counter to 901"],
    ["Frame notify c","start of method notify"],
    ["AtomicInc","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["LoadVar c","push the value of c"],
    ["Load","pop an address and push the value at the address"],
    ["Push ()","push constant ()"],
    ["Push PC(330)","push constant PC(330)"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["2-ary !=","pop 2 values and push the result of applying !="],
    ["JumpCond False 798","pop a value and jump to 798 if the value is False"],
    ["Push ()","push constant ()"],
    ["Push 0","push constant 0"],
    ["LoadVar c","push the value of c"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 1","push constant 1"],
    ["LoadVar c","push the value of c"],
    ["Load","pop an address and push the value at the address"],
    ["Push PC(443)","push constant PC(443)"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push PC(525)","push constant PC(525)"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["Pop","discard the top value on the stack"],
    ["Jump 798","set program counter to 798"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Return","restore caller method state and push result"],
    ["Jump 901","set program counter to 901"],
    ["Frame notifyAll c","start of method notifyAll"],
    ["LoadVar c","push the value of c"],
    ["Push ()","push constant ()"],
    ["Push PC(330)","push constant PC(330)"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["Store","pop a value and an address and store the value at the address"],
    ["Return","restore caller method state and push result"],
    ["Jump 901","set program counter to 901"],
    ["Frame Semaphore cnt","start of method Semaphore"],
    ["LoadVar cnt","push the value of cnt"],
    ["StoreVar result","pop a value and store in result"],
    ["Return","restore caller method state and push result"],
    ["Jump 901","set program counter to 901"],
    ["Frame P sema","start of method P"],
    ["Push True","push constant True"],
    ["StoreVar blocked","pop a value and store in blocked"],
    ["LoadVar blocked","push the value of blocked"],
    ["JumpCond False 836","pop a value and jump to 836 if the value is False"],
    ["AtomicInc","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["LoadVar sema","push the value of sema"],
    ["Load","pop an address and push the value at the address"],
    ["Push 0","push constant 0"],
    ["2-ary >","pop 2 values and push the result of applying >"],
    ["JumpCond False 834","pop a value and jump to 834 if the value is False"],
    ["LoadVar sema","push the value of sema"],
    ["Dup","push a copy of the top value on the stack"],
    ["Load","pop an address and push the value at the address"],
    ["Push 1","push constant 1"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["Store","pop a value and an address and store the value at the address"],
    ["Push False","push constant False"],
    ["StoreVar blocked","pop a value and store in blocked"],
    ["Jump 834","set program counter to 834"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Jump 817","set program counter to 817"],
    ["DelVar blocked","delete method variable blocked"],
    ["Return","restore caller method state and push result"],
    ["Jump 901","set program counter to 901"],
    ["Frame V sema","start of method V"],
    ["AtomicInc","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["LoadVar sema","push the value of sema"],
    ["Dup","push a copy of the top value on the stack"],
    ["Load","pop an address and push the value at the address"],
    ["Push 1","push constant 1"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["Store","pop a value and an address and store the value at the address"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Return","restore caller method state and push result"],
    ["Jump 901","set program counter to 901"],
    ["Frame Queue ()","start of method Queue"],
    ["Push ()","push constant ()"],
    ["StoreVar result","pop a value and store in result"],
    ["Return","restore caller method state and push result"],
    ["Jump 901","set program counter to 901"],
    ["Frame get q","start of method get"],
    ["Push True","push constant True"],
    ["StoreVar blocked","pop a value and store in blocked"],
    ["LoadVar blocked","push the value of blocked"],
    ["JumpCond False 882","pop a value and jump to 882 if the value is False"],
    ["AtomicInc","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["LoadVar q","push the value of q"],
    ["Load","pop an address and push the value at the address"],
    ["Push ()","push constant ()"],
    ["2-ary !=","pop 2 values and push the result of applying !="],
    ["JumpCond False 880","pop a value and jump to 880 if the value is False"],
    ["LoadVar q","push the value of q"],
    ["Load","pop an address and push the value at the address"],
    ["Push PC(42)","push constant PC(42)"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["StoreVar result","pop a value and store in result"],
    ["LoadVar q","push the value of q"],
    ["LoadVar q","push the value of q"],
    ["Load","pop an address and push the value at the address"],
    ["Push PC(49)","push constant PC(49)"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["Store","pop a value and an address and store the value at the address"],
    ["Push False","push constant False"],
    ["StoreVar blocked","pop a value and store in blocked"],
    ["Jump 880","set program counter to 880"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Jump 858","set program counter to 858"],
    ["DelVar blocked","delete method variable blocked"],
    ["Return","restore caller method state and push result"],
    ["Jump 901","set program counter to 901"],
    ["Frame put (q, item)","start of method put"],
    ["AtomicInc","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["LoadVar q","push the value of q"],
    ["Push ()","push constant ()"],
    ["Push 0","push constant 0"],
    ["LoadVar q","push the value of q"],
    ["Load","pop an address and push the value at the address"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 1","push constant 1"],
    ["LoadVar item","push the value of item"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push PC(32)","push constant PC(32)"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["Store","pop a value and an address and store the value at the address"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Return","restore caller method state and push result"],
    ["Push ?network","push constant ?network"],
    ["Sequential","sequential consistency for variable on top of stack"],
    ["Push ()","push constant ()"],
    ["Push PC(330)","push constant PC(330)"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["Store network","pop a value and store it in shared variable network"],
    ["Push {}","push constant {}"],
    ["Store decisions","pop a value and store it in shared variable decisions"],
    ["Jump 1113","set program counter to 1113"],
    ["Frame broadcast msg","start of method broadcast"],
    ["AtomicInc","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Push ()","push constant ()"],
    ["Push 0","push constant 0"],
    ["Push ?network","push constant ?network"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 1","push constant 1"],
    ["LoadVar msg","push the value of msg"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push PC(459)","push constant PC(459)"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["Pop","discard the top value on the stack"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Return","restore caller method state and push result"],
    ["Jump 1113","set program counter to 1113"],
    ["Frame receive round","start of method receive"],
    ["Load receiving","push value of shared variable receiving"],
    ["Load while","push value of shared variable while"],
    ["Push True","push constant True"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["StoreVar receiving","pop a value and store in receiving"],
    ["AtomicInc","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Push 0","push constant 0"],
    ["StoreVar $n933","pop a value and store in $n933"],
    ["Push ()","push constant ()"],
    ["Load network","push value of shared variable network"],
    ["1-ary keys","pop 1 value and push the result of applying keys"],
    ["StoreVar $s936","pop a value and store in $s936"],
    ["LoadVar $s936","push the value of $s936"],
    ["1-ary IsEmpty","pop 1 value and push the result of applying IsEmpty"],
    ["JumpCond True 961","pop a value and jump to 961 if the value is True"],
    ["Cut($s936, (r, e))","remove smallest element from $s936 and assign to (r, e)"],
    ["LoadVar r","push the value of r"],
    ["LoadVar round","push the value of round"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["JumpCond False 939","pop a value and jump to 939 if the value is False"],
    ["LoadVar $n933","push the value of $n933"],
    ["Push ?network","push constant ?network"],
    ["Push ()","push constant ()"],
    ["Push 0","push constant 0"],
    ["LoadVar r","push the value of r"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 1","push constant 1"],
    ["LoadVar e","push the value of e"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Load","pop an address and push the value at the address"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["IncVar $n933","increment the value of $n933"],
    ["Jump 939","set program counter to 939"],
    ["DelVar r","delete method variable r"],
    ["DelVar e","delete method variable e"],
    ["DelVar $s936","delete method variable $s936"],
    ["Push PC(66)","push constant PC(66)"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["Push 3","push constant 3"],
    ["2-ary >=","pop 2 values and push the result of applying >="],
    ["StoreVar receiving","pop a value and store in receiving"],
    ["Load network","push value of shared variable network"],
    ["StoreVar result","pop a value and store in result"],
    ["AtomicDec","decrement atomic counter of context"],
    ["DelVar receiving","delete method variable receiving"],
    ["Return","restore caller method state and push result"],
    ["Jump 1113","set program counter to 1113"],
    ["Frame process proposal","start of method process"],
    ["LoadVar proposal","push the value of proposal"],
    ["StoreVar est","pop a value and store in est"],
    ["Push { 0, 1, 2 }","push constant { 0, 1, 2 }"],
    ["StoreVar $s978","pop a value and store in $s978"],
    ["LoadVar $s978","push the value of $s978"],
    ["1-ary IsEmpty","pop 1 value and push the result of applying IsEmpty"],
    ["JumpCond True 1109","pop a value and jump to 1109 if the value is True"],
    ["Cut($s978, round)","remove smallest element from $s978 and assign to round"],
    ["Push ()","push constant ()"],
    ["Push 0","push constant 0"],
    ["LoadVar round","push the value of round"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 1","push constant 1"],
    ["LoadVar est","push the value of est"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push PC(910)","push constant PC(910)"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["Pop","discard the top value on the stack"],
    ["LoadVar round","push the value of round"],
    ["Push PC(925)","push constant PC(925)"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["StoreVar msgs","pop a value and store in msgs"],
    ["Push ()","push constant ()"],
    ["LoadVar msgs","push the value of msgs"],
    ["StoreVar $s999","pop a value and store in $s999"],
    ["LoadVar $s999","push the value of $s999"],
    ["1-ary IsEmpty","pop 1 value and push the result of applying IsEmpty"],
    ["JumpCond True 1021","pop a value and jump to 1021 if the value is True"],
    ["Cut($s999, (r, e))","remove smallest element from $s999 and assign to (r, e)"],
    ["LoadVar r","push the value of r"],
    ["LoadVar round","push the value of round"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["JumpCond False 1001","pop a value and jump to 1001 if the value is False"],
    ["LoadVar e","push the value of e"],
    ["Push ()","push constant ()"],
    ["Push 0","push constant 0"],
    ["LoadVar r","push the value of r"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 1","push constant 1"],
    ["LoadVar e","push the value of e"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["LoadVar msgs","push the value of msgs"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Jump 1001","set program counter to 1001"],
    ["DelVar r","delete method variable r"],
    ["DelVar e","delete method variable e"],
    ["DelVar $s999","delete method variable $s999"],
    ["StoreVar m","pop a value and store in m"],
    ["Push [0, 0]","push constant [0, 0]"],
    ["StoreVar count","pop a value and store in count"],
    ["Load selection","push value of shared variable selection"],
    ["Push PC(416)","push constant PC(416)"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["Push 3","push constant 3"],
    ["2-ary <","pop 2 values and push the result of applying <"],
    ["JumpCond False 1057","pop a value and jump to 1057 if the value is False"],
    ["LoadVar m","push the value of m"],
    ["Push PC(443)","push constant PC(443)"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["StoreVar e","pop a value and store in e"],
    ["Push ()","push constant ()"],
    ["Push 0","push constant 0"],
    ["LoadVar m","push the value of m"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push 1","push constant 1"],
    ["LoadVar e","push the value of e"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push PC(574)","push constant PC(574)"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["StoreVar m","pop a value and store in m"],
    ["Push ?count","push constant ?count"],
    ["LoadVar e","push the value of e"],
    ["Address","combine the top two values on the stack into an address and push the result"],
    ["Dup","push a copy of the top value on the stack"],
    ["LoadVar","pop the address of a method variable and push the value of that variable"],
    ["Push 1","push constant 1"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["StoreVar","pop a value and the address of a method variable and store the value at that address"],
    ["DelVar e","delete method variable e"],
    ["Jump 1027","set program counter to 1027"],
    ["ReadonlyInc","increment readonly counter of context; thread cannot mutate shared variables if > 0"],
    ["AtomicInc","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Push 0","push constant 0"],
    ["LoadVar count","push the value of count"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["Push 1","push constant 1"],
    ["LoadVar count","push the value of count"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["2-ary !=","pop 2 values and push the result of applying !="],
    ["Assert","pop a condition and raise exception if condition is false"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["Push 0","push constant 0"],
    ["LoadVar count","push the value of count"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["Push 1","push constant 1"],
    ["LoadVar count","push the value of count"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["2-ary <","pop 2 values and push the result of applying <"],
    ["JumpCond False 1079","pop a value and jump to 1079 if the value is False"],
    ["Push 0","push constant 0"],
    ["Jump 1080","set program counter to 1080"],
    ["Push 1","push constant 1"],
    ["StoreVar est","pop a value and store in est"],
    ["LoadVar est","push the value of est"],
    ["LoadVar count","push the value of count"],
    ["Apply","pop a pc or dictionary f and an index i and push f(i)"],
    ["Push 3","push constant 3"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["JumpCond False 1105","pop a value and jump to 1105 if the value is False"],
    ["AtomicInc","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Load decisions","push value of shared variable decisions"],
    ["Push {}","push constant {}"],
    ["LoadVar est","push the value of est"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["2-ary |","pop 2 values and push the result of applying |"],
    ["Store decisions","pop a value and store it in shared variable decisions"],
    ["ReadonlyInc","increment readonly counter of context; thread cannot mutate shared variables if > 0"],
    ["AtomicInc","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Load decisions","push value of shared variable decisions"],
    ["1-ary len","pop 1 value and push the result of applying len"],
    ["Push 1","push constant 1"],
    ["2-ary <=","pop 2 values and push the result of applying <="],
    ["Assert","pop a condition and raise exception if condition is false"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Jump 1105","set program counter to 1105"],
    ["DelVar msgs","delete method variable msgs"],
    ["DelVar m","delete method variable m"],
    ["DelVar count","delete method variable count"],
    ["Jump 980","set program counter to 980"],
    ["DelVar round","delete method variable round"],
    ["DelVar $s978","delete method variable $s978"],
    ["DelVar est","delete method variable est"],
    ["Return","restore caller method state and push result"],
    ["Push { 0, 1, 2 }","push constant { 0, 1, 2 }"],
    ["Choose","pop a set value and push one of its elements"],
    ["StoreVar nzeroes","pop a value and store in nzeroes"],
    ["Push { 0, 1, 2, 3 }","push constant { 0, 1, 2, 3 }"],
    ["StoreVar $s1116","pop a value and store in $s1116"],
    ["LoadVar $s1116","push the value of $s1116"],
    ["1-ary IsEmpty","pop 1 value and push the result of applying IsEmpty"],
    ["JumpCond True 1133","pop a value and jump to 1133 if the value is True"],
    ["Cut($s1116, i)","remove smallest element from $s1116 and assign to i"],
    ["Push ()","push constant ()"],
    ["LoadVar i","push the value of i"],
    ["LoadVar nzeroes","push the value of nzeroes"],
    ["2-ary <","pop 2 values and push the result of applying <"],
    ["JumpCond False 1129","pop a value and jump to 1129 if the value is False"],
    ["Push 0","push constant 0"],
    ["Jump 1130","set program counter to 1130"],
    ["Push 1","push constant 1"],
    ["Push PC(975)","push constant PC(975)"],
    ["Spawn","pop a pc, argument, and tag and spawn a new thread"],
    ["Jump 1118","set program counter to 1118"],
    ["DelVar i","delete method variable i"],
    ["DelVar $s1116","delete method variable $s1116"],
    ["DelVar nzeroes","delete method variable nzeroes"],
    ["Return","restore caller method state and push result"]
  ],
  "locations": {
    "5": { "file": "/Users/rvr/github/harmony/modules/list.hny", "line": "2", "code": "def subseq(s, b, e):" },
    "7": { "file": "/Users/rvr/github/harmony/modules/list.hny", "line": "3", "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "31": { "file": "/Users/rvr/github/harmony/modules/list.hny", "line": "5", "code": "def append(s, e):" },
    "33": { "file": "/Users/rvr/github/harmony/modules/list.hny", "line": "6", "code": "    result = s + [e,]" },
    "41": { "file": "/Users/rvr/github/harmony/modules/list.hny", "line": "8", "code": "def head(s):" },
    "43": { "file": "/Users/rvr/github/harmony/modules/list.hny", "line": "9", "code": "    result = s[0]" },
    "48": { "file": "/Users/rvr/github/harmony/modules/list.hny", "line": "11", "code": "def tail(s):" },
    "50": { "file": "/Users/rvr/github/harmony/modules/list.hny", "line": "12", "code": "    result = subseq(s, 1, len(s))" },
    "65": { "file": "/Users/rvr/github/harmony/modules/list.hny", "line": "15", "code": "def sum(a):" },
    "67": { "file": "/Users/rvr/github/harmony/modules/list.hny", "line": "16", "code": "    result = 0" },
    "69": { "file": "/Users/rvr/github/harmony/modules/list.hny", "line": "17", "code": "    for v in a:" },
    "75": { "file": "/Users/rvr/github/harmony/modules/list.hny", "line": "18", "code": "        result += v" },
    "83": { "file": "/Users/rvr/github/harmony/modules/list.hny", "line": "21", "code": "def set(a):" },
    "85": { "file": "/Users/rvr/github/harmony/modules/list.hny", "line": "22", "code": "    result = { v for v in a }" },
    "99": { "file": "/Users/rvr/github/harmony/modules/list.hny", "line": "25", "code": "def list(a):" },
    "101": { "file": "/Users/rvr/github/harmony/modules/list.hny", "line": "26", "code": "    result = [ v for v in a ]" },
    "119": { "file": "/Users/rvr/github/harmony/modules/list.hny", "line": "29", "code": "def values(d):" },
    "121": { "file": "/Users/rvr/github/harmony/modules/list.hny", "line": "30", "code": "    result = [ d[k] for k in keys d ]" },
    "142": { "file": "/Users/rvr/github/harmony/modules/list.hny", "line": "33", "code": "def items(d):" },
    "144": { "file": "/Users/rvr/github/harmony/modules/list.hny", "line": "34", "code": "    result = [ (k, d[k]) for k in keys d ]" },
    "171": { "file": "/Users/rvr/github/harmony/modules/list.hny", "line": "37", "code": "def enumerate(d):" },
    "173": { "file": "/Users/rvr/github/harmony/modules/list.hny", "line": "38", "code": "    result = []" },
    "175": { "file": "/Users/rvr/github/harmony/modules/list.hny", "line": "39", "code": "    let index = 0:" },
    "177": { "file": "/Users/rvr/github/harmony/modules/list.hny", "line": "40", "code": "        for k in keys d:" },
    "184": { "file": "/Users/rvr/github/harmony/modules/list.hny", "line": "41", "code": "            result += [ (index, d[k]), ]" },
    "199": { "file": "/Users/rvr/github/harmony/modules/list.hny", "line": "42", "code": "            index += 1" },
    "208": { "file": "/Users/rvr/github/harmony/modules/list.hny", "line": "45", "code": "def qsort(a):" },
    "210": { "file": "/Users/rvr/github/harmony/modules/list.hny", "line": "46", "code": "    if a == []:" },
    "214": { "file": "/Users/rvr/github/harmony/modules/list.hny", "line": "47", "code": "        result = []" },
    "217": { "file": "/Users/rvr/github/harmony/modules/list.hny", "line": "49", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "271": { "file": "/Users/rvr/github/harmony/modules/list.hny", "line": "52", "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "288": { "file": "/Users/rvr/github/harmony/modules/list.hny", "line": "55", "code": "def sorted(d):" },
    "290": { "file": "/Users/rvr/github/harmony/modules/list.hny", "line": "56", "code": "    result = qsort(list(d))" },
    "297": { "file": "/Users/rvr/github/harmony/modules/list.hny", "line": "59", "code": "def reversed(d):" },
    "299": { "file": "/Users/rvr/github/harmony/modules/list.hny", "line": "60", "code": "    let n = len(d):" },
    "302": { "file": "/Users/rvr/github/harmony/modules/list.hny", "line": "61", "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "329": { "file": "/Users/rvr/github/harmony/modules/bag.hny", "line": "1", "code": "def empty():" },
    "331": { "file": "/Users/rvr/github/harmony/modules/bag.hny", "line": "2", "code": "    result = []" },
    "334": { "file": "/Users/rvr/github/harmony/modules/bag.hny", "line": "4", "code": "def fromSet(s):" },
    "336": { "file": "/Users/rvr/github/harmony/modules/bag.hny", "line": "5", "code": "    result = { elt:1 for elt in s }" },
    "351": { "file": "/Users/rvr/github/harmony/modules/bag.hny", "line": "7", "code": "def fromList(a):" },
    "353": { "file": "/Users/rvr/github/harmony/modules/bag.hny", "line": "8", "code": "    result = []" },
    "355": { "file": "/Users/rvr/github/harmony/modules/bag.hny", "line": "9", "code": "    for i in keys(a):" },
    "362": { "file": "/Users/rvr/github/harmony/modules/bag.hny", "line": "10", "code": "        if a[i] in keys(result):" },
    "369": { "file": "/Users/rvr/github/harmony/modules/bag.hny", "line": "11", "code": "            result[a[i]] += 1" },
    "380": { "file": "/Users/rvr/github/harmony/modules/bag.hny", "line": "13", "code": "            result[a[i]] = 1" },
    "391": { "file": "/Users/rvr/github/harmony/modules/bag.hny", "line": "15", "code": "def count(bg, elt):" },
    "393": { "file": "/Users/rvr/github/harmony/modules/bag.hny", "line": "16", "code": "    assert 0 not in bg" },
    "402": { "file": "/Users/rvr/github/harmony/modules/bag.hny", "line": "17", "code": "    if elt in keys(bg):" },
    "407": { "file": "/Users/rvr/github/harmony/modules/bag.hny", "line": "18", "code": "        result = bg[elt]" },
    "412": { "file": "/Users/rvr/github/harmony/modules/bag.hny", "line": "20", "code": "        result = 0" },
    "415": { "file": "/Users/rvr/github/harmony/modules/bag.hny", "line": "22", "code": "def size(bg):" },
    "417": { "file": "/Users/rvr/github/harmony/modules/bag.hny", "line": "23", "code": "    assert 0 not in bg" },
    "426": { "file": "/Users/rvr/github/harmony/modules/bag.hny", "line": "24", "code": "    result = 0" },
    "428": { "file": "/Users/rvr/github/harmony/modules/bag.hny", "line": "25", "code": "    for c in bg:" },
    "434": { "file": "/Users/rvr/github/harmony/modules/bag.hny", "line": "26", "code": "        result += c" },
    "442": { "file": "/Users/rvr/github/harmony/modules/bag.hny", "line": "28", "code": "def bchoose(bg):" },
    "444": { "file": "/Users/rvr/github/harmony/modules/bag.hny", "line": "29", "code": "    assert 0 not in bg" },
    "453": { "file": "/Users/rvr/github/harmony/modules/bag.hny", "line": "30", "code": "    result = choose(keys(bg))" },
    "458": { "file": "/Users/rvr/github/harmony/modules/bag.hny", "line": "32", "code": "def add(pb, elt):" },
    "460": { "file": "/Users/rvr/github/harmony/modules/bag.hny", "line": "33", "code": "    assert 0 not in !pb" },
    "470": { "file": "/Users/rvr/github/harmony/modules/bag.hny", "line": "34", "code": "    if elt in keys(!pb):" },
    "476": { "file": "/Users/rvr/github/harmony/modules/bag.hny", "line": "35", "code": "        (!pb)[elt] += 1" },
    "485": { "file": "/Users/rvr/github/harmony/modules/bag.hny", "line": "37", "code": "        (!pb)[elt] = 1" },
    "491": { "file": "/Users/rvr/github/harmony/modules/bag.hny", "line": "39", "code": "def f_add(bg, elt):" },
    "493": { "file": "/Users/rvr/github/harmony/modules/bag.hny", "line": "40", "code": "    assert 0 not in bg" },
    "502": { "file": "/Users/rvr/github/harmony/modules/bag.hny", "line": "41", "code": "    result = bg" },
    "504": { "file": "/Users/rvr/github/harmony/modules/bag.hny", "line": "42", "code": "    if elt in keys(result):" },
    "509": { "file": "/Users/rvr/github/harmony/modules/bag.hny", "line": "43", "code": "        result[elt] += 1" },
    "518": { "file": "/Users/rvr/github/harmony/modules/bag.hny", "line": "45", "code": "        result[elt] = 1" },
    "524": { "file": "/Users/rvr/github/harmony/modules/bag.hny", "line": "47", "code": "def remove(pb, elt):" },
    "526": { "file": "/Users/rvr/github/harmony/modules/bag.hny", "line": "48", "code": "    assert 0 not in !pb" },
    "536": { "file": "/Users/rvr/github/harmony/modules/bag.hny", "line": "49", "code": "    if (elt in keys(!pb)) and ((!pb)[elt] > 0):" },
    "551": { "file": "/Users/rvr/github/harmony/modules/bag.hny", "line": "50", "code": "        (!pb)[elt] -= 1" },
    "560": { "file": "/Users/rvr/github/harmony/modules/bag.hny", "line": "51", "code": "    if (!pb)[elt] <= 0:" },
    "567": { "file": "/Users/rvr/github/harmony/modules/bag.hny", "line": "52", "code": "        del (!pb)[elt]" },
    "573": { "file": "/Users/rvr/github/harmony/modules/bag.hny", "line": "54", "code": "def f_remove(bg, elt):" },
    "575": { "file": "/Users/rvr/github/harmony/modules/bag.hny", "line": "55", "code": "    assert 0 not in bg" },
    "584": { "file": "/Users/rvr/github/harmony/modules/bag.hny", "line": "56", "code": "    result = bg" },
    "586": { "file": "/Users/rvr/github/harmony/modules/bag.hny", "line": "57", "code": "    if (elt in keys(result)) and (result[elt] > 0):" },
    "599": { "file": "/Users/rvr/github/harmony/modules/bag.hny", "line": "58", "code": "        result[elt] -= 1" },
    "608": { "file": "/Users/rvr/github/harmony/modules/bag.hny", "line": "59", "code": "    if result[elt] <= 0:" },
    "614": { "file": "/Users/rvr/github/harmony/modules/bag.hny", "line": "60", "code": "        del result[elt]" },
    "620": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "4", "code": "def tas(lk):" },
    "622": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "5", "code": "    atomic:" },
    "623": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "6", "code": "        result = !lk" },
    "626": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "7", "code": "        !lk = True" },
    "631": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "9", "code": "def cas(p, old, new):" },
    "633": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "10", "code": "    atomic:" },
    "634": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "11", "code": "        result = !p == old" },
    "639": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "12", "code": "        if result:" },
    "641": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "13", "code": "            !p = new" },
    "647": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "15", "code": "def BinSema(acquired):" },
    "649": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "16", "code": "    result = acquired" },
    "652": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "18", "code": "def Lock():" },
    "654": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "19", "code": "    result = BinSema(False)" },
    "659": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "21", "code": "def acquired(binsema):" },
    "661": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "22", "code": "    result = !binsema" },
    "665": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "24", "code": "def acquire(binsema):" },
    "667": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "25", "code": "    await not tas(binsema)" },
    "672": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "27", "code": "def release(binsema):" },
    "674": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "28", "code": "    atomic:" },
    "675": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "29", "code": "        assert !binsema" },
    "682": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "30", "code": "        !binsema = False" },
    "687": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "32", "code": "def held(binsema):" },
    "689": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "33", "code": "    result = !binsema" },
    "693": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "35", "code": "def Condition():" },
    "695": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "36", "code": "    result = bag.empty()" },
    "700": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "38", "code": "def wait(c, lk):" },
    "702": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "39", "code": "    let blocked, cnt, ctx = True, 0, get_context():" },
    "714": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "40", "code": "        atomic:" },
    "715": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "41", "code": "            cnt = bag.count(!c, ctx)" },
    "726": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "42", "code": "            bag.add(c, ctx)" },
    "736": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "43", "code": "            !lk = False" },
    "740": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "44", "code": "        while blocked:" },
    "742": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "45", "code": "            atomic:" },
    "743": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "46", "code": "                if (not !lk) and (bag.count(!c, ctx) <= cnt):" },
    "762": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "47", "code": "                    !lk = True" },
    "765": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "48", "code": "                    blocked = False" },
    "774": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "50", "code": "def notify(c):" },
    "776": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "51", "code": "    atomic:" },
    "777": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "52", "code": "        if !c != bag.empty():" },
    "784": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "53", "code": "            bag.remove(c, bag.bchoose(!c))" },
    "800": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "55", "code": "def notifyAll(c):" },
    "802": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "56", "code": "    !c = bag.empty()" },
    "808": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "58", "code": "def Semaphore(cnt):" },
    "810": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "59", "code": "    result = cnt" },
    "813": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "61", "code": "def P(sema):" },
    "815": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "62", "code": "    let blocked = True:" },
    "817": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "63", "code": "        while blocked:" },
    "819": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "64", "code": "            atomic:" },
    "820": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "65", "code": "                if !sema > 0:" },
    "825": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "66", "code": "                    !sema -= 1" },
    "831": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "67", "code": "                    blocked = False" },
    "838": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "68", "code": "def V(sema):" },
    "840": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "69", "code": "    atomic: !sema += 1" },
    "841": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "69", "code": "    atomic: !sema += 1" },
    "849": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "71", "code": "def Queue():" },
    "851": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "72", "code": "    result = []" },
    "854": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "74", "code": "def get(q):" },
    "856": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "75", "code": "    let blocked = True:" },
    "858": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "76", "code": "        while blocked:" },
    "860": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "77", "code": "            atomic:" },
    "861": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "78", "code": "                if !q != []:" },
    "866": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "79", "code": "                    result = list.head(!q)" },
    "871": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "80", "code": "                    !q = list.tail(!q)" },
    "877": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "81", "code": "                    blocked = False" },
    "884": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "83", "code": "def put(q, item):" },
    "886": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "84", "code": "    atomic: !q = list.append(!q, item)" },
    "887": { "file": "/Users/rvr/github/harmony/modules/synch.hny", "line": "84", "code": "    atomic: !q = list.append(!q, item)" },
    "901": { "file": "test/anonbosco3.hny", "line": "7", "code": "sequential network" },
    "903": { "file": "test/anonbosco3.hny", "line": "9", "code": "network = bag.empty()" },
    "907": { "file": "test/anonbosco3.hny", "line": "10", "code": "decisions = {}" },
    "909": { "file": "test/anonbosco3.hny", "line": "12", "code": "def broadcast(msg):" },
    "911": { "file": "test/anonbosco3.hny", "line": "13", "code": "    atomic:" },
    "912": { "file": "test/anonbosco3.hny", "line": "14", "code": "        bag.add(?network, msg)" },
    "924": { "file": "test/anonbosco3.hny", "line": "16", "code": "def receive(round):" },
    "926": { "file": "test/anonbosco3.hny", "line": "17", "code": "    let receiving = True" },
    "932": { "file": "test/anonbosco3.hny", "line": "19", "code": "            atomic: " },
    "933": { "file": "test/anonbosco3.hny", "line": "20", "code": "                receiving = list.sum(network[r, e] for (r, e) in keys(network)" },
    "969": { "file": "test/anonbosco3.hny", "line": "22", "code": "                result = network" },
    "974": { "file": "test/anonbosco3.hny", "line": "24", "code": "def process(proposal):" },
    "976": { "file": "test/anonbosco3.hny", "line": "25", "code": "    let est = proposal:" },
    "978": { "file": "test/anonbosco3.hny", "line": "26", "code": "        for round in {0..NROUNDS-1}:" },
    "984": { "file": "test/anonbosco3.hny", "line": "28", "code": "            broadcast(round, est)" },
    "994": { "file": "test/anonbosco3.hny", "line": "30", "code": "            let msgs = receive(round)" },
    "1027": { "file": "test/anonbosco3.hny", "line": "33", "code": "                while bag.size(selection) < (N - F):" },
    "1033": { "file": "test/anonbosco3.hny", "line": "34", "code": "                    let e = bag.bchoose(m):" },
    "1037": { "file": "test/anonbosco3.hny", "line": "35", "code": "                        m = bag.f_remove(m, e)" },
    "1047": { "file": "test/anonbosco3.hny", "line": "36", "code": "                        count[e] += 1" },
    "1057": { "file": "test/anonbosco3.hny", "line": "39", "code": "                assert(count[0] != count[1])" },
    "1069": { "file": "test/anonbosco3.hny", "line": "40", "code": "                est = 0 if count[0] < count[1] else 1" },
    "1081": { "file": "test/anonbosco3.hny", "line": "41", "code": "                if count[est] == (N - F):" },
    "1087": { "file": "test/anonbosco3.hny", "line": "42", "code": "                    atomic:" },
    "1088": { "file": "test/anonbosco3.hny", "line": "43", "code": "                        decisions |= { est }" },
    "1094": { "file": "test/anonbosco3.hny", "line": "44", "code": "                        assert len(decisions) <= 1" },
    "1113": { "file": "test/anonbosco3.hny", "line": "46", "code": "let nzeroes = choose({0..N/2}):" },
    "1116": { "file": "test/anonbosco3.hny", "line": "47", "code": "    for i in {0..N-1}:" },
    "1122": { "file": "test/anonbosco3.hny", "line": "48", "code": "        spawn process(0 if i < nzeroes else 1)" }
  }
}
