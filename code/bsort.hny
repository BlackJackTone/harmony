from barrier import *

const N = 5     # size of list to be sorted

thelist = [ choose({ 1 .. N }) for i in { 1 .. N } ]

finally all(thelist[i-1] <= thelist[i] for i in { 1 .. N - 1 })

const NTHREADS = N / 2
bar = Barrier(NTHREADS)
count = 0                   # to detect termination

def fetch_and_increment(p): # atomic increment
    atomically !p += 1

def sorter(i):
    var is_sorted = False
    var oldcount = 0
    while not is_sorted:
        # Even phase
        if thelist[i - 1] > thelist[i]:
            thelist[i - 1], thelist[i] = thelist[i], thelist[i - 1]
            fetch_and_increment(?count)

        bwait(?bar)

        # Odd phase
        if (i < (N - 1)) and (thelist[i] > thelist[i + 1]):
            thelist[i], thelist[i + 1] = thelist[i + 1], thelist[i]
            fetch_and_increment(?count)

        bwait(?bar)

        # Sorted if nobody swapped anything
        is_sorted = count == oldcount
        oldcount = count

        bwait(?bar)

for k in { 0 .. NTHREADS - 1 }:
    spawn sorter((2*k) + 1)
