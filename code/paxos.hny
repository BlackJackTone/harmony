import bag

const F = 1
const NACCEPTORS = (2 * F) + 1
const NLEADERS = F + 1
const NBALLOTS = 2

network = bag.empty()
let nfalse = choose({0..NLEADERS/2}):
    proposals = [ i <= nfalse for i in { 1..NLEADERS } ]
decisions = {}

def send(m):
    atomic: network = bag.add(network, m)

def receive(ballot, phase):
    let msgs = { e:c for (b,p,t,e):c in network
                        where (b,p,t) == (ballot, phase, .B) }:
        result = bag.combinations(msgs, NACCEPTORS - F)

def leader(ballot, proposal):
    send(ballot, 1, .A, None)
    while ballot <= NBALLOTS:
        select quorum in receive(ballot, 1):
            let accepted = { e for e:_ in quorum where e != None }:
                if accepted != {}:
                    _, proposal = max(accepted)
            send(ballot, 2, .A, proposal)
        select quorum in receive(ballot, 2):
            if bag.count(quorum, (ballot, proposal)) == (NACCEPTORS - F):
                assert proposal in proposals    # validity
                decisions |= { proposal }
                assert len(decisions) <= 1      # agreement
            ballot += NLEADERS
            if ballot <= NBALLOTS:
                send(ballot, 1, .A, None)

def acceptor():
    let ballot, last_accepted, received = 0, None, {}:
        while len(received) < (NBALLOTS * 2):
            select b,p,e in { (b,p,e) for b,p,t,e:_ in network
                        where ((b,p) not in received) and (t == .A) }:
                received |= { (b, p) }
                if b >= ballot:
                    ballot = b
                    if p == 2:
                        last_accepted = (ballot, e)
                send(b, p, .B, last_accepted)

for i in {0..NLEADERS - 1}:
    spawn leader(i + 1, proposals[i])
for i in {1..NACCEPTORS}:
    spawn acceptor()
