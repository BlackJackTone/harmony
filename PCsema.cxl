import synch;

const NSLOTS = 2;     # size of bounded buffer
const NITEMS = 2;     # number of items to produce/consume per process
const NPROCS = 2;     # number of producers and number of consumers

def produce(item):
    call P &(nempty);
    call P &(mutex);
    buf[b_in] = item;
    b_in = (b_in % NSLOTS) + 1;
    call V &(mutex);
    call V &(nfull);
;
def consume():
    call P &(nfull);
    call P &(mutex);
    result = buf[b_out];
    b_out = (b_out % NSLOTS) + 1;
    call V &(mutex);
    call V &(nempty);
;
def producer():
    for i in 1..NITEMS:
        call produce(i);
    ;
;
def consumer():
    for i in 1..NITEMS:
        result = consume();
    ;
;
buf = dict{ () for x in 1..NSLOTS };
b_in = 1; b_out = 1;
nfull = Semaphore(0);
nempty = Semaphore(NSLOTS);
mutex = Semaphore(1);
for i in 1..NPROCS:
    spawn consumer();
    spawn producer();
;
