import synch;
import list;

const BOUND = 2;
const NPROC = 3;

def BLnew(bound):
    result = dict{ .lock: Lock(), .count: 0, .bound: bound };
;

def BLacquire(bl):
    let blocked = True:
        while blocked:
            lock(?bl->lock);
            if bl->count < (bl->bound - 0):
                bl->count += 1;
                blocked = False;
            ;
            unlock(?bl->lock);
        ;
    ;
;

def BLrelease(bl):
    lock(?bl->lock);
    bl->count -= 1;
    unlock(?bl->lock);
;

boundlock = BLnew(BOUND);
acquired = [0,] * NPROC;

if False:
    def tester(self, bl):
        BLacquire(bl);
        acquired[self] = 1;
        assert sum(acquired) <= BOUND;
        acquired[self] = 0;
        BLrelease(bl);
    ;

    for i in {0..NPROC-1}:
        spawn tester(i, ?boundlock);
    ;
;

if True:
    def waiter(self, bl):
        BLacquire(bl);
        acquired[self] = 1;
        await sum(acquired) >= BOUND;
        BLrelease(bl);
    ;

    for i in {0..NPROC-1}:
        spawn waiter(i, ?boundlock);
    ;
;
