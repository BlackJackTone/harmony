network = {}

dest = choose({ None, .bob, .corey })

def send(m):
    atomically network |= { m }

def alice():
    if dest != None:
        send({ .dst: dest,
            .contents: { .type: 1, .nonce: .nonceA, .initiator: .alice } })
        atomically when exists m in network when (m.dst == .alice)
                    and (m.contents.type == 2) and (m.contents.nonce == .nonceA):
            send({ .dst: dest, .contents: { .type: 3, .nonce: m.contents.nonce2 } })

def bob():
    atomically when exists m in network when (m.dst == .bob)
                    and (m.contents.type == 1) and (m.contents.initiator == .alice):
        send({ .dst: .alice,
            .contents: { .type: 2, .nonce: m.contents.nonce, .nonce2: .nonceB } })
    atomically when exists m in network when (m.dst == .bob)
                    and (m.contents.type == 3) and (m.contents.nonce == .nonceB):
        assert dest == .bob

def corey():
    var received, nonces, msgs = {}, { .nonceC }, {}
    while True:
        atomically when exists m in network - received when m.dst == .corey:
            received |= { m }
            nonces |= { m.contents.nonce }
            if m.contents.type == 2:
                nonces |= { m.contents.nonce2 }
            for dst in { .alice, .bob } for n in nonces:
                msgs |= {{ .dst: dst, .contents: { .type: 1, .nonce: n, .initiator: ini }}
                                    for ini in { .alice, .bob }}
                msgs |= {{ .dst: dst, .contents: { .type: 2, .nonce: n, .nonce2: n2 }}
                                    for n2 in nonces }
                msgs |= {{ .dst: dst, .contents: { .type: 3, .nonce: n }}}
            send(choose(msgs - network))

spawn alice(); spawn bob()
spawn eternal corey()
