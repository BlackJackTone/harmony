# Peterson's algorithm

const MustReach = {
    dict{
        .process: dict{ .name: "p", .tag: tag },
        .label: "cs"
    } for tag in 0..1
};

def p(self):
    while True:
        flags[self] = True;
        @gate:
            atomic:
                turn = 1 - self;
            ;
        while flags[1 - self] and (turn == (1 - self)):
            pass;
        ;
        @cs:
            assert (not (flags[1 - self])) or ((turn == self) or
                        ((atLabel("gate")) == dict{nametags[1 - self] : 1})),
                dict{
                    "nametag": nametag(),
                    "other": nametags[1 - self],
                    "flags": flags,
                    "turn": turn,
                    "gate": atLabel("gate")
                }
            ;
        flags[self] = False;
    ;
;
flags = dict{ 0: False, 1: False };
turn = 0;

nametags = dict{ dict{ .name: "p", .tag: tag } for tag in 0..1 };
spawn p(0), 0;
spawn p(1), 1;
