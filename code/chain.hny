const NREPLICAS = 4
const NOPS = 5

network = {}
final = None

def send(m):
    atomic: network |= { m }

def receive(predecessor, index):
    result = { payload for (id, payload) in network where (id == predecessor)
                        and ((payload == .crash) or (payload[0] == index)) }

def replica(self, immortal):
    let history, predecessors = [], { 0 .. self - 1 }:
        while choose({ immortal, True }) and (len(history) < NOPS):
            if predecessors == {}:
                send(self, (len(history), self))
                history += [self,]
            else:
                select payload in receive(max(predecessors), len(history)):
                    if payload == .crash:
                        predecessors -= { max(predecessors) }
                    else:
                        send(self, payload)
                        history += [payload[1],]
        if len(history) == NOPS:
            atomic:
                assert (final == None) or (final == history)
                final = history
        else:
            send(self, .crash)

let survivor = choose({ 0 .. NREPLICAS - 1 }):
    for i in { 0 .. NREPLICAS - 1 }:
        spawn replica(i, i == survivor)
