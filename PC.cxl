import synch;

const N = 2;         # size of bounded buffer

def producer():
    while True:
        @produce:
        var full = True;
        while full:
            call lock&(mylock);
            if cnt < N:
                full = False;
            else:
                assert cnt == N, cnt;
                call unlock&(mylock);
            ;
        ;
        cnt = cnt + 1;
        buf[myin] = choose({ 10, 20 });
        myin = (myin % N) + 1;

        call unlock&(mylock);
    ;
;
def consumer():
    while True:
        @consume:
        var empty = True;
        while empty:
            call lock&(mylock);
            if cnt > 0:
                empty = False;
            else:
                assert cnt == 0, cnt;
                call unlock&(mylock);
            ;
        ;
        cnt = cnt - 1;
        # self = buf[myout];
        myout = (myout % N) + 1;

        call unlock&(mylock);
    ;
;
buf = dict{ 0 for x in 1..N };
myin = 1;
myout = 1;
cnt = 0;
mylock = Lock();

spawn producer(), 0;
spawn producer(), 0;
spawn producer(), 0;
spawn consumer(), 1;
spawn consumer(), 1;
