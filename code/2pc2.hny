import list

const NBANKS, NCOORDS = 3, 2
const MAX_BALANCE, MAX_TRANSFER = 1, 1

balances = [ choose({ 0 .. MAX_BALANCE }) for i in { 0 .. NBANKS - 1 } ]
total = list.sum(balances)

def receive(self, sources):
    let forme = { m for m in network where m.dst == self }:
        result = { forme } if { m.src for m in forme } == sources else {}

def check(self):
    let allbanks = { (.bank, i) for i in { 0 .. NBANKS - 1 } }:
        for bank in allbanks:
            send({ .dst: bank, .src: self, .request: .withdraw, .amount: 0 })
        select msgs in receive(self, allbanks):
            assert all(m.response == .yes for m in msgs) =>
                        (list.sum(m.balance for m in msgs) == total)
            for m in msgs where m.response == .yes:
                send({ .dst: m.src, .src: self, .request: .abort })

def transfer(self):
    let b1 = choose({ (.bank, i) for i in { 0 .. NBANKS - 1 }})
    let b2 = choose({ (.bank, i) for i in { 0 .. NBANKS - 1 }} - { b1 })
    let amount = choose({1 .. MAX_TRANSFER }):
        send({ .dst: b1, .src: self, .request: .withdraw, .amount: amount })
        send({ .dst: b2, .src: self, .request: .deposit, .amount: amount })
        select msgs in receive(self, { src, dst }):
            if all(m.response == .yes for m in msgs):
                for m in msgs where m.response == .yes:
                    send({ .dst: m.src, .src: self, .request: .commit })
            else:
                for m in msgs where m.response == .yes:
                    send({ .dst: m.src, .src: self, .request: .abort })

for i in { 0 .. NBANKS - 1 }:
    spawn eternal bank((.bank, i), balances[i])
for i in { 1 .. NCOORDS }:
    if choose({ .transfer, .check }) == .transfer:
        spawn transfer((.coord, i))
    else:
        spawn check((.coord, i))
