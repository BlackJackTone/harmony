def tas(lk):
    atomic:
        result = ^lk;
        ^lk = True;
    ;
;
def Lock():
    result = False;
;
def lock(lk):
    while tas(lk):
        pass;
    ;
;
def unlock(lk):
    ^lk = False;
;
def Condition(lk):
    result = dict{ .lock: lk, .waiters: {} };
;
def wait(c):
    let lk = (^c).lock, blocked = True:
        (^c).waiters = (^c).waiters + { nametag() };
        ^lk = False;
        while blocked:
            atomic:
                if (not (^lk)) and (not ((nametag()) in (^c).waiters)):
                    ^lk = True;
                    blocked = False;
                ;
            ;
        ;
    ;
;
def notify(c):
    let waiters = (^c).waiters:
        if waiters != {}:
            (^c).waiters = waiters - { choose(waiters) };
        ;
    ;
;
def notifyAll(c):
    (^c).waiters = {};
;
def Semaphore(cnt):
    result = cnt;
;
def P(sema):
    let blocked = True:
        while blocked:
            atomic:
                if (^sema) > 0:
                    ^sema = (^sema) - 1;
                    blocked = False;
                ;
            ;
        ;
    ;
;
def V(sema):
    atomic:
        ^sema = (^sema) + 1;
    ;
;
