import bag

const F = 2
const N = (3 * F) + 1
const NROUNDS = 3

network = bag.empty()
let n_zeroes = choose({ 0 .. N / 2 }):
    proposals = [ 0 if i <= n_zeroes else 1 for i in { 1 .. N } ]
decisions = {}

def broadcast(msg):
    atomically network = bag.add(network, msg)

def receive(round, k):
    let msgs = { e:c for (r,e):c in network where r == round }:
        result = bag.combinations(msgs, k)

def processor(proposal):
    broadcast(0, proposal)
    for round in {0..NROUNDS-1}:
        atomically when exists quorum in receive(round, N - F):
            let count = [ bag.count(quorum, i) for i in { 0..1 } ]:
                assert count[0] != count[1]
                proposal = 0 if count[0] > count[1] else 1
                if count[proposal] == (N - F):
                    assert proposal in proposals           # validity
                    possibly proposal == 0, proposal == 1  # can decide either value
                    decisions |= { proposal }
                    assert len(decisions) <= 1             # agreement
                broadcast(round + 1, proposal)

for i in {0..N-1}:
    spawn processor(proposals[i])
