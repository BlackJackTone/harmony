import synch;

const NROUNDS = 3;
const NPROC = 3;

def barrier_enter(self):
    for i in {0..NPROC-1} such that i != self:
        enqueue(?queues[i], i);
    ;
    for i in {1..NPROC-1}:
        dequeue(?queues[self]);
    ;
;
def barrier_exit(self):
    pass;
;
queues = [ Queue() for i in {0..NPROC} ];

# check that all non-None values in round are the same
def check():
    result = True;
    let x = None:
        for i in {0..NPROC-1}:
            if result and (round[i] != None):
                if x != None:
                    result = round[i] == x;
                ;
                x = round[i];
            ;
        ;
    ;
;

def process(self):
    for r in {0..NROUNDS-1}:
        barrier_enter(self);
        round[self] = r;
        assert check();
        round[self] = None;
        barrier_exit(self);
    ;
    done[self] = True;
;
def main():
    await all(done);
;

round = [None,] * NPROC;
done = [False,] * NPROC;
for i in {0..NPROC-1}:
    spawn process(i);
;
spawn main();
