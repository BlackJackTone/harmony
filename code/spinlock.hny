const N = 3

shared = False
private = [ True, ] * N

invariant len([ x for x in [shared,] + private where not x ]) <= 1

def tas(s, p):
    atomic:
        !p = !s
        !s = True

def thread(self):
    let p = ?private[self]:
        while choose({ False, True }):
            # Enter critical section
            while !p:
                tas(?shared, p)

            # Critical section
            @cs: assert (not !p) and (atLabel(cs) == { (thread, self): 1 })

            # Leave critical section
            !p = True
            shared = False

for i in {0..N-1}:
    spawn thread(i)
